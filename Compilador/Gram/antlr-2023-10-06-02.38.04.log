2023-10-06 02:38:04:211 grammar LogManager.java:25 before: (LEXER_GRAMMAR Swiftlexer (RULES (RULE PRINT (BLOCK (ALT 'print'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE IN (BLOCK (ALT 'in'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE R_INT (BLOCK (ALT 'Int'))) (RULE R_FLOAT (BLOCK (ALT 'Float'))) (RULE R_DOUBLE (BLOCK (ALT 'Double'))) (RULE R_BOOL (BLOCK (ALT 'Bool'))) (RULE R_CHAR (BLOCK (ALT 'Character'))) (RULE R_STRING (BLOCK (ALT 'String'))) (RULE TRUE (BLOCK (ALT 'true'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE DOUBLE (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) '.' (+ (BLOCK (ALT [0-9])))))) (RULE CHAR (BLOCK (ALT '\'' (~ (SET ["])) '\''))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE BOOLEAN (BLOCK (ALT (BLOCK (ALT 'true') (ALT 'false'))))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE TK_TRIPLEPUNTO (BLOCK (ALT '...'))) (RULE TK_PUNTO (BLOCK (ALT '.'))) (RULE TK_PUNTOCOMA (BLOCK (ALT ';'))) (RULE TK_COMA (BLOCK (ALT ','))) (RULE TK_DOSPUNTOS (BLOCK (ALT ':'))) (RULE TK_IGUAL (BLOCK (ALT '='))) (RULE TK_IGUALIGUAL (BLOCK (ALT '=='))) (RULE TK_MAYORIGUAL (BLOCK (ALT '>='))) (RULE TK_IGUALMAYOR (BLOCK (ALT '=>'))) (RULE TK_MENOSMAYOR (BLOCK (ALT '->'))) (RULE TK_MENORIGUAL (BLOCK (ALT '<='))) (RULE TK_DIFIGUAL (BLOCK (ALT '!='))) (RULE TK_MAYOR (BLOCK (ALT '>'))) (RULE TK_MENOR (BLOCK (ALT '<'))) (RULE TK_MULT (BLOCK (ALT '*'))) (RULE TK_DIV (BLOCK (ALT '/'))) (RULE TK_MODULO (BLOCK (ALT '%'))) (RULE TK_MAS (BLOCK (ALT '+'))) (RULE TK_MENOS (BLOCK (ALT '-'))) (RULE TK_PARA (BLOCK (ALT '('))) (RULE TK_PARC (BLOCK (ALT ')'))) (RULE TK_LLAVEA (BLOCK (ALT '{'))) (RULE TK_LLAVEC (BLOCK (ALT '}'))) (RULE TK_CORA (BLOCK (ALT '['))) (RULE TK_CORC (BLOCK (ALT ']'))) (RULE TK_AND (BLOCK (ALT '&&'))) (RULE TK_AMPERSAND (BLOCK (ALT '&'))) (RULE TK_OR (BLOCK (ALT '||'))) (RULE TK_BARRA (BLOCK (ALT '|'))) (RULE TK_NOT (BLOCK (ALT '!'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \r\n\t])))) skip))) (RULE TK_MULTI (BLOCK (LEXER_ALT_ACTION (ALT '/*' (+ (BLOCK (ALT (~ (SET [/]))))) '*/') skip))) (RULE TK_LINE (BLOCK (LEXER_ALT_ACTION (ALT '//' (+ (BLOCK (ALT (~ (SET [\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-10-06 02:38:04:243 grammar LogManager.java:25 after: (LEXER_GRAMMAR Swiftlexer (RULES (RULE PRINT (BLOCK (ALT 'print'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE IN (BLOCK (ALT 'in'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE R_INT (BLOCK (ALT 'Int'))) (RULE R_FLOAT (BLOCK (ALT 'Float'))) (RULE R_DOUBLE (BLOCK (ALT 'Double'))) (RULE R_BOOL (BLOCK (ALT 'Bool'))) (RULE R_CHAR (BLOCK (ALT 'Character'))) (RULE R_STRING (BLOCK (ALT 'String'))) (RULE TRUE (BLOCK (ALT 'true'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE DOUBLE (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) '.' (+ (BLOCK (ALT [0-9])))))) (RULE CHAR (BLOCK (ALT '\'' (~ (SET ["])) '\''))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE BOOLEAN (BLOCK (ALT (BLOCK (ALT 'true') (ALT 'false'))))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE TK_TRIPLEPUNTO (BLOCK (ALT '...'))) (RULE TK_PUNTO (BLOCK (ALT '.'))) (RULE TK_PUNTOCOMA (BLOCK (ALT ';'))) (RULE TK_COMA (BLOCK (ALT ','))) (RULE TK_DOSPUNTOS (BLOCK (ALT ':'))) (RULE TK_IGUAL (BLOCK (ALT '='))) (RULE TK_IGUALIGUAL (BLOCK (ALT '=='))) (RULE TK_MAYORIGUAL (BLOCK (ALT '>='))) (RULE TK_IGUALMAYOR (BLOCK (ALT '=>'))) (RULE TK_MENOSMAYOR (BLOCK (ALT '->'))) (RULE TK_MENORIGUAL (BLOCK (ALT '<='))) (RULE TK_DIFIGUAL (BLOCK (ALT '!='))) (RULE TK_MAYOR (BLOCK (ALT '>'))) (RULE TK_MENOR (BLOCK (ALT '<'))) (RULE TK_MULT (BLOCK (ALT '*'))) (RULE TK_DIV (BLOCK (ALT '/'))) (RULE TK_MODULO (BLOCK (ALT '%'))) (RULE TK_MAS (BLOCK (ALT '+'))) (RULE TK_MENOS (BLOCK (ALT '-'))) (RULE TK_PARA (BLOCK (ALT '('))) (RULE TK_PARC (BLOCK (ALT ')'))) (RULE TK_LLAVEA (BLOCK (ALT '{'))) (RULE TK_LLAVEC (BLOCK (ALT '}'))) (RULE TK_CORA (BLOCK (ALT '['))) (RULE TK_CORC (BLOCK (ALT ']'))) (RULE TK_AND (BLOCK (ALT '&&'))) (RULE TK_AMPERSAND (BLOCK (ALT '&'))) (RULE TK_OR (BLOCK (ALT '||'))) (RULE TK_BARRA (BLOCK (ALT '|'))) (RULE TK_NOT (BLOCK (ALT '!'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \r\n\t])))) skip))) (RULE TK_MULTI (BLOCK (LEXER_ALT_ACTION (ALT '/*' (+ (BLOCK (ALT (~ (SET [/]))))) '*/') skip))) (RULE TK_LINE (BLOCK (LEXER_ALT_ACTION (ALT '//' (+ (BLOCK (ALT (~ (SET [\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
