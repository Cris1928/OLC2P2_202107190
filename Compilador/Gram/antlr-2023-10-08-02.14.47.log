2023-10-08 02:14:46:508 grammar LogManager.java:25 before: (PARSER_GRAMMAR Swiftgrammar (OPTIONS (= tokenVocab Swiftlexer)) (@ header {

import "OLC2/Compilador/interfaces"
import "OLC2/Compilador/instruccion"
import "OLC2/Compilador/expression"

import arrayList "github.com/colegno/arraylist"

}) (RULES (RULE start (returns *arrayList.List lista) (BLOCK (ALT instrucciones EOF {$lista = $instrucciones.l}))) (RULE instrucciones (returns *arrayList.List l) (@ init {
    $l =  arrayList.New()
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= list instruccion)))) {
        listInt := localctx.(*InstruccionesContext).GetList()
        for _, e := range listInt {
            $l.Add(e.GetInstr())
        }
    }))) (RULE instruccion (returns interfaces.Instruction instr) (BLOCK (ALT instruccion_println { $instr = $instruccion_println.instr               }) (ALT instruccion_structs_declaracion) (ALT instruccion_declaracion { $instr = $instruccion_declaracion.instr           }) (ALT instruccion_asignacion { $instr = $instruccion_asignacion.instr            }) (ALT instr_structs_assignment) (ALT instruccion_if { $instr = $instruccion_if.instr                    }) (ALT instruccion_for_in) (ALT instruccion_while) (ALT instruccion_while_true) (ALT instruccion_switch) (ALT instruccion_break) (ALT instruccion_continue) (ALT instruccion_func) (ALT instruccion_llamada) (ALT instruccion_return) (ALT instr_structs_declaration))) (RULE instruccion_println (returns interfaces.Instruction instr) (BLOCK (ALT PRINT TK_PARA primitivo TK_PARC { $instr = instruction.NewPrintln(nil, $primitivo.p,       "-1",         $PRINT.line, localctx.(*Instruccion_printlnContext).Get_PRINT().GetColumn()) }) (ALT PRINT TK_PARA STRING TK_COMA list_expression TK_PARC { $instr = instruction.NewPrintln($list_expression.l, nil,$STRING.text[1:len($STRING.text)-1], $PRINT.line, localctx.(*Instruccion_printlnContext).Get_PRINT().GetColumn()) }) (ALT PRINT TK_PARA expressions TK_PARC { $instr = instruction.NewPrintln(nil, $expressions.p,       "-1",         $PRINT.line, localctx.(*Instruccion_printlnContext).Get_PRINT().GetColumn()) }))) (RULE instruccion_declaracion (returns interfaces.Instruction instr) (BLOCK (ALT VAR ID TK_IGUAL expressions { $instr = instruction.NewDeclaration($ID.text, interfaces.NULL,      $expressions.p, true,  $VAR.line, localctx.(*Instruccion_declaracionContext).Get_VAR().GetColumn()) }) (ALT VAR ID TK_DOSPUNTOS instruccion_tipo { $instr = instruction.NewDeclaration($ID.text, $instruccion_tipo.tipo_exp,  nil,           true,  $VAR.line, localctx.(*Instruccion_declaracionContext).Get_VAR().GetColumn()) }) (ALT VAR ID TK_DOSPUNTOS instruccion_tipo TK_IGUAL expressions { $instr = instruction.NewDeclaration($ID.text, $instruccion_tipo.tipo_exp, $expressions.p, true,  $VAR.line, localctx.(*Instruccion_declaracionContext).Get_VAR().GetColumn()) }) (ALT LET ID TK_IGUAL expressions { $instr = instruction.NewDeclaration($ID.text, interfaces.NULL,      $expressions.p, false, $LET.line, localctx.(*Instruccion_declaracionContext).Get_LET().GetColumn()) }) (ALT LET ID TK_DOSPUNTOS instruccion_tipo { $instr = instruction.NewDeclaration($ID.text, $instruccion_tipo.tipo_exp, nil,            false, $LET.line, localctx.(*Instruccion_declaracionContext).Get_LET().GetColumn()) }) (ALT LET ID TK_DOSPUNTOS instruccion_tipo TK_IGUAL expressions { $instr = instruction.NewDeclaration($ID.text, $instruccion_tipo.tipo_exp, $expressions.p, false, $LET.line, localctx.(*Instruccion_declaracionContext).Get_LET().GetColumn()) }))) (RULE instruccion_asignacion (returns interfaces.Instruction instr) (BLOCK (ALT ID TK_IGUAL expressions { $instr = instruction.NewAssignment($ID.text, $expressions.p, $ID.line, localctx.(*Instruccion_asignacionContext).Get_ID().GetColumn()) }))) (RULE instruccion_if (returns interfaces.Instruction instr) (BLOCK (ALT IF expressions TK_LLAVEA (= left_instr expressions) TK_LLAVEC TK_LLAVEC { $instr = instruction.NewIf($expressions.p, $left_instr.p, nil, nil,               $IF.line, localctx.(*Instruccion_ifContext).Get_IF().GetColumn()) }) (ALT IF expressions TK_LLAVEA (= left_instr instrucciones) TK_LLAVEC ELSE TK_LLAVEA (= right_instr instrucciones) TK_LLAVEC) (ALT IF expressions TK_LLAVEA (= left_instr instrucciones) TK_LLAVEC ELSE instr_else_if))) (RULE instr_else_if (returns *arrayList.List l) (@ init {
    $l =  arrayList.New()
  }) (BLOCK (ALT (* (BLOCK (ALT (+= e instruccion_if)))) {
        listInt := localctx.(*Instr_else_ifContext).GetE()
        for _, e := range listInt {
            $l.Add(e.GetInstr())
        }
    }))) (RULE instruccion_ternario (returns interfaces.Expression p) (BLOCK (ALT IF (= cond expressions) TK_LLAVEA (= left_instr expressions) TK_LLAVEC { $p = instruction.NewIf($cond.p, $left_instr.p, nil, nil,                       $IF.line, localctx.(*Instruccion_ternarioContext).Get_IF().GetColumn()) }) (ALT IF (= cond expressions) TK_LLAVEA (= left_instr expressions) TK_LLAVEC ELSE TK_LLAVEA (= right_instr expressions) TK_LLAVEC { $p = instruction.NewIf($cond.p, $left_instr.p, $right_instr.p, nil,             $IF.line, localctx.(*Instruccion_ternarioContext).Get_IF().GetColumn()) }) (ALT IF (= cond expressions) TK_LLAVEA (= left_instr expressions) TK_LLAVEC ELSE instr_else_if_ternario { $p = instruction.NewIf($cond.p, $left_instr.p, nil, $instr_else_if_ternario.l, $IF.line, localctx.(*Instruccion_ternarioContext).Get_IF().GetColumn()) }))) (RULE instr_else_if_ternario (returns *arrayList.List l) (@ init {
    $l =  arrayList.New()
  }) (BLOCK (ALT (* (BLOCK (ALT (+= e instruccion_ternario)))) {
        listInt := localctx.(*Instr_else_if_ternarioContext).GetE()
        for _, e := range listInt {
            $l.Add(e.GetP())
        }
    }))) (RULE instruccion_switch (BLOCK (ALT SWITCH expressions TK_LLAVEA list_case block_default TK_LLAVEC) (ALT SWITCH expressions TK_LLAVEA block_default TK_LLAVEC))) (RULE list_case (BLOCK (ALT (+ (BLOCK (ALT (+= e instruccion_case))))))) (RULE instruccion_case (BLOCK (ALT list_expre_case TK_DOSPUNTOS TK_LLAVEA instrucciones TK_LLAVEC) (ALT list_expre_case TK_DOSPUNTOS block_instr_switch TK_COMA))) (RULE list_expre_case (BLOCK (ALT (+ (BLOCK (ALT (+= e block_case))))))) (RULE block_case (BLOCK (ALT expressions TK_BARRA) (ALT expressions))) (RULE block_instr_switch (BLOCK (ALT (+= list instruccion)))) (RULE instr_default (BLOCK (ALT CASE ID TK_DOSPUNTOS TK_LLAVEA instrucciones TK_LLAVEC) (ALT CASE ID TK_DOSPUNTOS block_instr_switch))) (RULE block_default (BLOCK (ALT (+ (BLOCK (ALT (+= e instr_default))))))) (RULE instruccion_switch_ternario (BLOCK (ALT SWITCH expressions TK_LLAVEA list_case_ternario instr_default_ter TK_LLAVEC) (ALT SWITCH expressions TK_LLAVEA instr_default_ter TK_LLAVEC))) (RULE list_case_ternario (BLOCK (ALT (+ (BLOCK (ALT (+= e instr_case_ter))))))) (RULE instr_case_ter (BLOCK (ALT list_expre_case_ter TK_DOSPUNTOS expressions) (ALT list_expre_case_ter TK_DOSPUNTOS TK_LLAVEA expressions TK_LLAVEC))) (RULE list_expre_case_ter (BLOCK (ALT (+ (BLOCK (ALT (+= e block_case_ter))))))) (RULE block_case_ter (BLOCK (ALT expressions TK_BARRA) (ALT expressions))) (RULE instr_default_ter (BLOCK (ALT CASE ID TK_DOSPUNTOS expressions) (ALT CASE ID TK_DOSPUNTOS TK_LLAVEA expressions TK_LLAVEC))) (RULE instruccion_while (BLOCK (ALT WHILE expressions TK_LLAVEA instrucciones TK_LLAVEC))) (RULE instruccion_for_in (BLOCK (ALT FOR ID IN (= left expressions) TK_TRIPLEPUNTO (= right expressions) TK_LLAVEA instrucciones TK_LLAVEC) (ALT FOR ID IN (= left expressions) TK_LLAVEA instrucciones TK_LLAVEC))) (RULE instruccion_while_true (BLOCK (ALT WHILE TRUE TK_LLAVEA instrucciones TK_LLAVEC))) (RULE instruccion_while_true_ternario (BLOCK (ALT WHILE TRUE TK_LLAVEA instrucciones TK_LLAVEC))) (RULE instruccion_break (BLOCK (ALT BREAK) (ALT BREAK expressions))) (RULE instruccion_continue (BLOCK (ALT CONTINUE))) (RULE instruccion_return (BLOCK (ALT RETURN expressions))) (RULE instruccion_func (BLOCK (ALT FUNC ID TK_PARA TK_PARC TK_LLAVEA instrucciones TK_LLAVEC) (ALT FUNC ID TK_PARA TK_PARC TK_MENOSMAYOR instruccion_tipo TK_LLAVEA instrucciones TK_LLAVEC) (ALT FUNC ID TK_PARA list_function_parameters TK_PARC TK_LLAVEA instrucciones TK_LLAVEC) (ALT FUNC ID TK_PARA list_function_parameters TK_PARC TK_MENOSMAYOR instruccion_tipo TK_LLAVEA instrucciones TK_LLAVEC))) (RULE list_function_parameters (BLOCK (ALT (+ (BLOCK (ALT (+= e block_parameters_fn))))))) (RULE block_parameters_fn (BLOCK (ALT ID TK_DOSPUNTOS instruccion_tipo TK_COMA) (ALT ID TK_DOSPUNTOS instruccion_tipo))) (RULE instruccion_llamada (BLOCK (ALT ID TK_PARA TK_PARC) (ALT ID TK_PARA list_expression TK_PARC))) (RULE instr_llamada_expre (BLOCK (ALT ID TK_PARA TK_PARC) (ALT ID TK_PARA list_expression TK_PARC))) (RULE instruccion_structs_declaracion (BLOCK (ALT STRUCT ID TK_LLAVEA list_struct_parameters TK_LLAVEC))) (RULE list_struct_parameters (BLOCK (ALT (+ (BLOCK (ALT (+= e block_structs_parameters))))))) (RULE block_structs_parameters (BLOCK (ALT ID TK_DOSPUNTOS instruccion_tipo TK_COMA) (ALT ID TK_DOSPUNTOS instruccion_tipo))) (RULE instr_arrays_identifier (BLOCK (ALT ID list_arrays_parameters_id))) (RULE list_arrays_parameters_id (BLOCK (ALT (+ (BLOCK (ALT (+= e block_arrays_identifier))))))) (RULE block_arrays_identifier (BLOCK (ALT TK_CORA expressions TK_CORC))) (RULE instr_structs_declaration (BLOCK (ALT VAR (= left ID) TK_IGUAL (= right ID) TK_LLAVEA list_struct_parameters_decla TK_LLAVEC) (ALT LET (= left ID) TK_IGUAL (= right ID) TK_LLAVEA list_struct_parameters_decla TK_LLAVEC))) (RULE list_struct_parameters_decla (BLOCK (ALT (+ (BLOCK (ALT (+= e block_structs_parameters_decla))))))) (RULE block_structs_parameters_decla (BLOCK (ALT ID TK_DOSPUNTOS expressions) (ALT ID TK_DOSPUNTOS expressions TK_COMA))) (RULE instr_structs_identifier (BLOCK (ALT ID list_struct_parameters_id))) (RULE list_struct_parameters_id (BLOCK (ALT (+ (BLOCK (ALT (+= e block_structs_identifier))))))) (RULE block_structs_identifier (BLOCK (ALT TK_PUNTO ID))) (RULE instr_structs_assignment (BLOCK (ALT ID list_struct_parameters_id TK_IGUAL expressions))) (RULE instruccion_tipo (returns interfaces.TypeExpression tipo_exp) (BLOCK (ALT R_INT {$tipo_exp = interfaces.INTEGER}) (ALT R_FLOAT {$tipo_exp = interfaces.FLOAT}) (ALT R_STRING {$tipo_exp = interfaces.STRING}) (ALT R_BOOL {$tipo_exp = interfaces.BOOLEAN}) (ALT R_CHAR {$tipo_exp = interfaces.CHAR}))) (RULE list_expression (returns *arrayList.List l) (@ init {
    $l =  arrayList.New()
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= e block_list_expression)))) {
        listInt := localctx.(*List_expressionContext).GetE()
        for _, e := range listInt {
            $l.Add(e.GetP())
        }
    }))) (RULE block_list_expression (returns interfaces.Expression p) (BLOCK (ALT expressions TK_COMA { $p =  instruction.NewListExpre($expressions.p) }) (ALT expressions { $p =  instruction.NewListExpre($expressions.p) }))) (RULE expressions (returns interfaces.Expression p) (BLOCK (ALT expre_log { $p = $expre_log.p }) (ALT expre_arit { $p = $expre_arit.p }) (ALT expre_rel { $p = $expre_rel.p }))) (RULE expre_log (returns interfaces.Expression p) (BLOCK (ALT (= op '!') (= left expre_log) { $p = expression.NewOperacion($left.p, $op.text, nil,      true,  $op.line, localctx.(*Expre_logContext).GetOp().GetColumn()) }) (ALT (= left expre_log) (= op (BLOCK (ALT '&&') (ALT '||'))) (= right expre_log) { $p = expression.NewOperacion($left.p, $op.text, $right.p, false, $op.line, localctx.(*Expre_logContext).GetOp().GetColumn()) }) (ALT expre_rel { $p = $expre_rel.p }))) (RULE expre_rel (returns interfaces.Expression p) (BLOCK (ALT (= left expre_rel) (= op (BLOCK (ALT '<') (ALT '<=') (ALT '>=') (ALT '>') (ALT '!=') (ALT '=='))) (= right expre_rel) { $p = expression.NewOperacion($left.p, $op.text, $right.p, false, $op.line, localctx.(*Expre_relContext).GetOp().GetColumn()) }) (ALT expre_arit { $p = $expre_arit.p }))) (RULE expre_arit (returns interfaces.Expression p) (BLOCK (ALT (= op '-') (= left expre_arit) { $p = expression.NewOperacion($left.p, $op.text, nil,      true,  $op.line, localctx.(*Expre_aritContext).GetOp().GetColumn()) }) (ALT (= left expre_arit) (= op (BLOCK (ALT '*') (ALT '/') (ALT '%'))) (= right expre_arit) { $p = expression.NewOperacion($left.p, $op.text, $right.p, false, $op.line, localctx.(*Expre_aritContext).GetOp().GetColumn()) }) (ALT (= left expre_arit) (= op (BLOCK (ALT '+') (ALT '-'))) (= right expre_arit) { $p = expression.NewOperacion($left.p, $op.text, $right.p, false, $op.line, localctx.(*Expre_aritContext).GetOp().GetColumn()) }) (ALT expre_valor { $p = $expre_valor.p }) (ALT TK_PARA expressions TK_PARC { $p = $expressions.p }))) (RULE expre_valor (returns interfaces.Expression p) (BLOCK (ALT primitivo { $p = $primitivo.p }))) (RULE primitivo (returns interfaces.Expression p) (BLOCK (ALT NUMBER {
              num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }

            $p = expression.NewPrimitivo(num, interfaces.INTEGER, interfaces.NULL, $NUMBER.line, localctx.(*PrimitivoContext).Get_NUMBER().GetColumn())
       }) (ALT DOUBLE {  
                num,err := strconv.ParseFloat($DOUBLE.text, 64)
                if err!= nil{
                    fmt.Println(err)
                }
            $p = expression.NewPrimitivo(num, interfaces.FLOAT, interfaces.NULL, $DOUBLE.line, localctx.(*PrimitivoContext).Get_DOUBLE().GetColumn())
              }) (ALT STRING { 
              str:= $STRING.text[1:len($STRING.text)-1]
              $p = expression.NewPrimitivo(str, interfaces.STRING, interfaces.NULL, $STRING.line, localctx.(*PrimitivoContext).Get_STRING().GetColumn())
            
            }) (ALT BOOLEAN { 
          
              exp,_ := strconv.ParseBool($BOOLEAN.text)
              $p = expression.NewPrimitivo(exp, interfaces.BOOLEAN, interfaces.NULL, $BOOLEAN.line, localctx.(*PrimitivoContext).Get_BOOLEAN().GetColumn())
            }) (ALT CHAR {

            str:= $CHAR.text[1]
            $p = expression.NewPrimitivo(string(str), interfaces.CHAR, interfaces.NULL, $CHAR.line, localctx.(*PrimitivoContext).Get_CHAR().GetColumn())
          
          }) (ALT instr_llamada_expre) (ALT instr_structs_identifier) (ALT instr_arrays_identifier) (ALT ID { $p = instruction.NewIdentifier($ID.text, $ID.line, localctx.(*PrimitivoContext).Get_ID().GetColumn()) }) (ALT instruccion_ternario { $p = $instruccion_ternario.p }) (ALT instruccion_switch_ternario)))))
2023-10-08 02:14:46:588 grammar LogManager.java:25 after: (PARSER_GRAMMAR Swiftgrammar (OPTIONS (= tokenVocab Swiftlexer)) (@ header {

import "OLC2/Compilador/interfaces"
import "OLC2/Compilador/instruccion"
import "OLC2/Compilador/expression"

import arrayList "github.com/colegno/arraylist"

}) (RULES (RULE start (returns *arrayList.List lista) (BLOCK (ALT instrucciones EOF {$lista = $instrucciones.l}))) (RULE instrucciones (returns *arrayList.List l) (@ init {
    $l =  arrayList.New()
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= list instruccion)))) {
        listInt := localctx.(*InstruccionesContext).GetList()
        for _, e := range listInt {
            $l.Add(e.GetInstr())
        }
    }))) (RULE instruccion (returns interfaces.Instruction instr) (BLOCK (ALT instruccion_println { $instr = $instruccion_println.instr               }) (ALT instruccion_structs_declaracion) (ALT instruccion_declaracion { $instr = $instruccion_declaracion.instr           }) (ALT instruccion_asignacion { $instr = $instruccion_asignacion.instr            }) (ALT instr_structs_assignment) (ALT instruccion_if { $instr = $instruccion_if.instr                    }) (ALT instruccion_for_in) (ALT instruccion_while) (ALT instruccion_while_true) (ALT instruccion_switch) (ALT instruccion_break) (ALT instruccion_continue) (ALT instruccion_func) (ALT instruccion_llamada) (ALT instruccion_return) (ALT instr_structs_declaration))) (RULE instruccion_println (returns interfaces.Instruction instr) (BLOCK (ALT PRINT TK_PARA primitivo TK_PARC { $instr = instruction.NewPrintln(nil, $primitivo.p,       "-1",         $PRINT.line, localctx.(*Instruccion_printlnContext).Get_PRINT().GetColumn()) }) (ALT PRINT TK_PARA STRING TK_COMA list_expression TK_PARC { $instr = instruction.NewPrintln($list_expression.l, nil,$STRING.text[1:len($STRING.text)-1], $PRINT.line, localctx.(*Instruccion_printlnContext).Get_PRINT().GetColumn()) }) (ALT PRINT TK_PARA expressions TK_PARC { $instr = instruction.NewPrintln(nil, $expressions.p,       "-1",         $PRINT.line, localctx.(*Instruccion_printlnContext).Get_PRINT().GetColumn()) }))) (RULE instruccion_declaracion (returns interfaces.Instruction instr) (BLOCK (ALT VAR ID TK_IGUAL expressions { $instr = instruction.NewDeclaration($ID.text, interfaces.NULL,      $expressions.p, true,  $VAR.line, localctx.(*Instruccion_declaracionContext).Get_VAR().GetColumn()) }) (ALT VAR ID TK_DOSPUNTOS instruccion_tipo { $instr = instruction.NewDeclaration($ID.text, $instruccion_tipo.tipo_exp,  nil,           true,  $VAR.line, localctx.(*Instruccion_declaracionContext).Get_VAR().GetColumn()) }) (ALT VAR ID TK_DOSPUNTOS instruccion_tipo TK_IGUAL expressions { $instr = instruction.NewDeclaration($ID.text, $instruccion_tipo.tipo_exp, $expressions.p, true,  $VAR.line, localctx.(*Instruccion_declaracionContext).Get_VAR().GetColumn()) }) (ALT LET ID TK_IGUAL expressions { $instr = instruction.NewDeclaration($ID.text, interfaces.NULL,      $expressions.p, false, $LET.line, localctx.(*Instruccion_declaracionContext).Get_LET().GetColumn()) }) (ALT LET ID TK_DOSPUNTOS instruccion_tipo { $instr = instruction.NewDeclaration($ID.text, $instruccion_tipo.tipo_exp, nil,            false, $LET.line, localctx.(*Instruccion_declaracionContext).Get_LET().GetColumn()) }) (ALT LET ID TK_DOSPUNTOS instruccion_tipo TK_IGUAL expressions { $instr = instruction.NewDeclaration($ID.text, $instruccion_tipo.tipo_exp, $expressions.p, false, $LET.line, localctx.(*Instruccion_declaracionContext).Get_LET().GetColumn()) }))) (RULE instruccion_asignacion (returns interfaces.Instruction instr) (BLOCK (ALT ID TK_IGUAL expressions { $instr = instruction.NewAssignment($ID.text, $expressions.p, $ID.line, localctx.(*Instruccion_asignacionContext).Get_ID().GetColumn()) }))) (RULE instruccion_if (returns interfaces.Instruction instr) (BLOCK (ALT IF expressions TK_LLAVEA (= left_instr expressions) TK_LLAVEC TK_LLAVEC { $instr = instruction.NewIf($expressions.p, $left_instr.p, nil, nil,               $IF.line, localctx.(*Instruccion_ifContext).Get_IF().GetColumn()) }) (ALT IF expressions TK_LLAVEA (= left_instr instrucciones) TK_LLAVEC ELSE TK_LLAVEA (= right_instr instrucciones) TK_LLAVEC) (ALT IF expressions TK_LLAVEA (= left_instr instrucciones) TK_LLAVEC ELSE instr_else_if))) (RULE instr_else_if (returns *arrayList.List l) (@ init {
    $l =  arrayList.New()
  }) (BLOCK (ALT (* (BLOCK (ALT (+= e instruccion_if)))) {
        listInt := localctx.(*Instr_else_ifContext).GetE()
        for _, e := range listInt {
            $l.Add(e.GetInstr())
        }
    }))) (RULE instruccion_ternario (returns interfaces.Expression p) (BLOCK (ALT IF (= cond expressions) TK_LLAVEA (= left_instr expressions) TK_LLAVEC { $p = instruction.NewIf($cond.p, $left_instr.p, nil, nil,                       $IF.line, localctx.(*Instruccion_ternarioContext).Get_IF().GetColumn()) }) (ALT IF (= cond expressions) TK_LLAVEA (= left_instr expressions) TK_LLAVEC ELSE TK_LLAVEA (= right_instr expressions) TK_LLAVEC { $p = instruction.NewIf($cond.p, $left_instr.p, $right_instr.p, nil,             $IF.line, localctx.(*Instruccion_ternarioContext).Get_IF().GetColumn()) }) (ALT IF (= cond expressions) TK_LLAVEA (= left_instr expressions) TK_LLAVEC ELSE instr_else_if_ternario { $p = instruction.NewIf($cond.p, $left_instr.p, nil, $instr_else_if_ternario.l, $IF.line, localctx.(*Instruccion_ternarioContext).Get_IF().GetColumn()) }))) (RULE instr_else_if_ternario (returns *arrayList.List l) (@ init {
    $l =  arrayList.New()
  }) (BLOCK (ALT (* (BLOCK (ALT (+= e instruccion_ternario)))) {
        listInt := localctx.(*Instr_else_if_ternarioContext).GetE()
        for _, e := range listInt {
            $l.Add(e.GetP())
        }
    }))) (RULE instruccion_switch (BLOCK (ALT SWITCH expressions TK_LLAVEA list_case block_default TK_LLAVEC) (ALT SWITCH expressions TK_LLAVEA block_default TK_LLAVEC))) (RULE list_case (BLOCK (ALT (+ (BLOCK (ALT (+= e instruccion_case))))))) (RULE instruccion_case (BLOCK (ALT list_expre_case TK_DOSPUNTOS TK_LLAVEA instrucciones TK_LLAVEC) (ALT list_expre_case TK_DOSPUNTOS block_instr_switch TK_COMA))) (RULE list_expre_case (BLOCK (ALT (+ (BLOCK (ALT (+= e block_case))))))) (RULE block_case (BLOCK (ALT expressions TK_BARRA) (ALT expressions))) (RULE block_instr_switch (BLOCK (ALT (+= list instruccion)))) (RULE instr_default (BLOCK (ALT CASE ID TK_DOSPUNTOS TK_LLAVEA instrucciones TK_LLAVEC) (ALT CASE ID TK_DOSPUNTOS block_instr_switch))) (RULE block_default (BLOCK (ALT (+ (BLOCK (ALT (+= e instr_default))))))) (RULE instruccion_switch_ternario (BLOCK (ALT SWITCH expressions TK_LLAVEA list_case_ternario instr_default_ter TK_LLAVEC) (ALT SWITCH expressions TK_LLAVEA instr_default_ter TK_LLAVEC))) (RULE list_case_ternario (BLOCK (ALT (+ (BLOCK (ALT (+= e instr_case_ter))))))) (RULE instr_case_ter (BLOCK (ALT list_expre_case_ter TK_DOSPUNTOS expressions) (ALT list_expre_case_ter TK_DOSPUNTOS TK_LLAVEA expressions TK_LLAVEC))) (RULE list_expre_case_ter (BLOCK (ALT (+ (BLOCK (ALT (+= e block_case_ter))))))) (RULE block_case_ter (BLOCK (ALT expressions TK_BARRA) (ALT expressions))) (RULE instr_default_ter (BLOCK (ALT CASE ID TK_DOSPUNTOS expressions) (ALT CASE ID TK_DOSPUNTOS TK_LLAVEA expressions TK_LLAVEC))) (RULE instruccion_while (BLOCK (ALT WHILE expressions TK_LLAVEA instrucciones TK_LLAVEC))) (RULE instruccion_for_in (BLOCK (ALT FOR ID IN (= left expressions) TK_TRIPLEPUNTO (= right expressions) TK_LLAVEA instrucciones TK_LLAVEC) (ALT FOR ID IN (= left expressions) TK_LLAVEA instrucciones TK_LLAVEC))) (RULE instruccion_while_true (BLOCK (ALT WHILE TRUE TK_LLAVEA instrucciones TK_LLAVEC))) (RULE instruccion_while_true_ternario (BLOCK (ALT WHILE TRUE TK_LLAVEA instrucciones TK_LLAVEC))) (RULE instruccion_break (BLOCK (ALT BREAK) (ALT BREAK expressions))) (RULE instruccion_continue (BLOCK (ALT CONTINUE))) (RULE instruccion_return (BLOCK (ALT RETURN expressions))) (RULE instruccion_func (BLOCK (ALT FUNC ID TK_PARA TK_PARC TK_LLAVEA instrucciones TK_LLAVEC) (ALT FUNC ID TK_PARA TK_PARC TK_MENOSMAYOR instruccion_tipo TK_LLAVEA instrucciones TK_LLAVEC) (ALT FUNC ID TK_PARA list_function_parameters TK_PARC TK_LLAVEA instrucciones TK_LLAVEC) (ALT FUNC ID TK_PARA list_function_parameters TK_PARC TK_MENOSMAYOR instruccion_tipo TK_LLAVEA instrucciones TK_LLAVEC))) (RULE list_function_parameters (BLOCK (ALT (+ (BLOCK (ALT (+= e block_parameters_fn))))))) (RULE block_parameters_fn (BLOCK (ALT ID TK_DOSPUNTOS instruccion_tipo TK_COMA) (ALT ID TK_DOSPUNTOS instruccion_tipo))) (RULE instruccion_llamada (BLOCK (ALT ID TK_PARA TK_PARC) (ALT ID TK_PARA list_expression TK_PARC))) (RULE instr_llamada_expre (BLOCK (ALT ID TK_PARA TK_PARC) (ALT ID TK_PARA list_expression TK_PARC))) (RULE instruccion_structs_declaracion (BLOCK (ALT STRUCT ID TK_LLAVEA list_struct_parameters TK_LLAVEC))) (RULE list_struct_parameters (BLOCK (ALT (+ (BLOCK (ALT (+= e block_structs_parameters))))))) (RULE block_structs_parameters (BLOCK (ALT ID TK_DOSPUNTOS instruccion_tipo TK_COMA) (ALT ID TK_DOSPUNTOS instruccion_tipo))) (RULE instr_arrays_identifier (BLOCK (ALT ID list_arrays_parameters_id))) (RULE list_arrays_parameters_id (BLOCK (ALT (+ (BLOCK (ALT (+= e block_arrays_identifier))))))) (RULE block_arrays_identifier (BLOCK (ALT TK_CORA expressions TK_CORC))) (RULE instr_structs_declaration (BLOCK (ALT VAR (= left ID) TK_IGUAL (= right ID) TK_LLAVEA list_struct_parameters_decla TK_LLAVEC) (ALT LET (= left ID) TK_IGUAL (= right ID) TK_LLAVEA list_struct_parameters_decla TK_LLAVEC))) (RULE list_struct_parameters_decla (BLOCK (ALT (+ (BLOCK (ALT (+= e block_structs_parameters_decla))))))) (RULE block_structs_parameters_decla (BLOCK (ALT ID TK_DOSPUNTOS expressions) (ALT ID TK_DOSPUNTOS expressions TK_COMA))) (RULE instr_structs_identifier (BLOCK (ALT ID list_struct_parameters_id))) (RULE list_struct_parameters_id (BLOCK (ALT (+ (BLOCK (ALT (+= e block_structs_identifier))))))) (RULE block_structs_identifier (BLOCK (ALT TK_PUNTO ID))) (RULE instr_structs_assignment (BLOCK (ALT ID list_struct_parameters_id TK_IGUAL expressions))) (RULE instruccion_tipo (returns interfaces.TypeExpression tipo_exp) (BLOCK (ALT R_INT {$tipo_exp = interfaces.INTEGER}) (ALT R_FLOAT {$tipo_exp = interfaces.FLOAT}) (ALT R_STRING {$tipo_exp = interfaces.STRING}) (ALT R_BOOL {$tipo_exp = interfaces.BOOLEAN}) (ALT R_CHAR {$tipo_exp = interfaces.CHAR}))) (RULE list_expression (returns *arrayList.List l) (@ init {
    $l =  arrayList.New()
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= e block_list_expression)))) {
        listInt := localctx.(*List_expressionContext).GetE()
        for _, e := range listInt {
            $l.Add(e.GetP())
        }
    }))) (RULE block_list_expression (returns interfaces.Expression p) (BLOCK (ALT expressions TK_COMA { $p =  instruction.NewListExpre($expressions.p) }) (ALT expressions { $p =  instruction.NewListExpre($expressions.p) }))) (RULE expressions (returns interfaces.Expression p) (BLOCK (ALT expre_log { $p = $expre_log.p }) (ALT expre_arit { $p = $expre_arit.p }) (ALT expre_rel { $p = $expre_rel.p }))) (RULE expre_log (returns interfaces.Expression p) (BLOCK (ALT (= op '!') (= left expre_log) { $p = expression.NewOperacion($left.p, $op.text, nil,      true,  $op.line, localctx.(*Expre_logContext).GetOp().GetColumn()) }) (ALT (= left expre_log) (= op (SET '&&' '||')) (= right expre_log) { $p = expression.NewOperacion($left.p, $op.text, $right.p, false, $op.line, localctx.(*Expre_logContext).GetOp().GetColumn()) }) (ALT expre_rel { $p = $expre_rel.p }))) (RULE expre_rel (returns interfaces.Expression p) (BLOCK (ALT (= left expre_rel) (= op (SET '<' '<=' '>=' '>' '!=' '==')) (= right expre_rel) { $p = expression.NewOperacion($left.p, $op.text, $right.p, false, $op.line, localctx.(*Expre_relContext).GetOp().GetColumn()) }) (ALT expre_arit { $p = $expre_arit.p }))) (RULE expre_arit (returns interfaces.Expression p) (BLOCK (ALT (= op '-') (= left expre_arit) { $p = expression.NewOperacion($left.p, $op.text, nil,      true,  $op.line, localctx.(*Expre_aritContext).GetOp().GetColumn()) }) (ALT (= left expre_arit) (= op (SET '*' '/' '%')) (= right expre_arit) { $p = expression.NewOperacion($left.p, $op.text, $right.p, false, $op.line, localctx.(*Expre_aritContext).GetOp().GetColumn()) }) (ALT (= left expre_arit) (= op (SET '+' '-')) (= right expre_arit) { $p = expression.NewOperacion($left.p, $op.text, $right.p, false, $op.line, localctx.(*Expre_aritContext).GetOp().GetColumn()) }) (ALT expre_valor { $p = $expre_valor.p }) (ALT TK_PARA expressions TK_PARC { $p = $expressions.p }))) (RULE expre_valor (returns interfaces.Expression p) (BLOCK (ALT primitivo { $p = $primitivo.p }))) (RULE primitivo (returns interfaces.Expression p) (BLOCK (ALT NUMBER {
              num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }

            $p = expression.NewPrimitivo(num, interfaces.INTEGER, interfaces.NULL, $NUMBER.line, localctx.(*PrimitivoContext).Get_NUMBER().GetColumn())
       }) (ALT DOUBLE {  
                num,err := strconv.ParseFloat($DOUBLE.text, 64)
                if err!= nil{
                    fmt.Println(err)
                }
            $p = expression.NewPrimitivo(num, interfaces.FLOAT, interfaces.NULL, $DOUBLE.line, localctx.(*PrimitivoContext).Get_DOUBLE().GetColumn())
              }) (ALT STRING { 
              str:= $STRING.text[1:len($STRING.text)-1]
              $p = expression.NewPrimitivo(str, interfaces.STRING, interfaces.NULL, $STRING.line, localctx.(*PrimitivoContext).Get_STRING().GetColumn())
            
            }) (ALT BOOLEAN { 
          
              exp,_ := strconv.ParseBool($BOOLEAN.text)
              $p = expression.NewPrimitivo(exp, interfaces.BOOLEAN, interfaces.NULL, $BOOLEAN.line, localctx.(*PrimitivoContext).Get_BOOLEAN().GetColumn())
            }) (ALT CHAR {

            str:= $CHAR.text[1]
            $p = expression.NewPrimitivo(string(str), interfaces.CHAR, interfaces.NULL, $CHAR.line, localctx.(*PrimitivoContext).Get_CHAR().GetColumn())
          
          }) (ALT instr_llamada_expre) (ALT instr_structs_identifier) (ALT instr_arrays_identifier) (ALT ID { $p = instruction.NewIdentifier($ID.text, $ID.line, localctx.(*PrimitivoContext).Get_ID().GetColumn()) }) (ALT instruccion_ternario { $p = $instruccion_ternario.p }) (ALT instruccion_switch_ternario)))))
2023-10-08 02:14:47:158 left-recursion LogManager.java:25 expre_log returns [interfaces.Expression p]
    :   ( {} op='!'<tokenIndex=1314> left=expre_log<tokenIndex=1318,p=3>                                                { $p = expression.NewOperacion($left.p, $op.text, nil,      true,  $op.line, localctx.(*Expre_logContext).GetOp().GetColumn()) } 
        | expre_rel<tokenIndex=1342>                                                           { $p = $expre_rel.p } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> op=('&&'<tokenIndex=1330>|'||'<tokenIndex=1332>) right=expre_log<tokenIndex=1337,p=3>                       { $p = expression.NewOperacion($left.p, $op.text, $right.p, false, $op.line, localctx.(*Expre_logContext).GetOp().GetColumn()) }
        )*
    ;
2023-10-08 02:14:47:185 grammar LogManager.java:25 added: (RULE expre_log (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (= op ('!' (ELEMENT_OPTIONS (= tokenIndex 1314)))) (= left (expre_log (ELEMENT_OPTIONS (= tokenIndex 1318) (= p 3)))) { $p = expression.NewOperacion($left.p, $op.text, nil,      true,  $op.line, localctx.(*Expre_logContext).GetOp().GetColumn()) }) (ALT (expre_rel (ELEMENT_OPTIONS (= tokenIndex 1342))) { $p = $expre_rel.p })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (= op (SET ('&&' (ELEMENT_OPTIONS (= tokenIndex 1330))) ('||' (ELEMENT_OPTIONS (= tokenIndex 1332))))) (= right (expre_log (ELEMENT_OPTIONS (= tokenIndex 1337) (= p 3)))) { $p = expression.NewOperacion($left.p, $op.text, $right.p, false, $op.line, localctx.(*Expre_logContext).GetOp().GetColumn()) }))))))
2023-10-08 02:14:47:188 left-recursion LogManager.java:25 expre_rel returns [interfaces.Expression p]
    :   ( {} expre_arit<tokenIndex=1383>                                                          { $p = $expre_arit.p } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> op=('<'<tokenIndex=1362>|'<='<tokenIndex=1364>|'>='<tokenIndex=1366>|'>'<tokenIndex=1368>|'!='<tokenIndex=1370>|'=='<tokenIndex=1372>) right=expre_rel<tokenIndex=1377,p=3>       { $p = expression.NewOperacion($left.p, $op.text, $right.p, false, $op.line, localctx.(*Expre_relContext).GetOp().GetColumn()) }
        )*
    ;
2023-10-08 02:14:47:194 grammar LogManager.java:25 added: (RULE expre_rel (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (expre_arit (ELEMENT_OPTIONS (= tokenIndex 1383))) { $p = $expre_arit.p })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (= op (SET ('<' (ELEMENT_OPTIONS (= tokenIndex 1362))) ('<=' (ELEMENT_OPTIONS (= tokenIndex 1364))) ('>=' (ELEMENT_OPTIONS (= tokenIndex 1366))) ('>' (ELEMENT_OPTIONS (= tokenIndex 1368))) ('!=' (ELEMENT_OPTIONS (= tokenIndex 1370))) ('==' (ELEMENT_OPTIONS (= tokenIndex 1372))))) (= right (expre_rel (ELEMENT_OPTIONS (= tokenIndex 1377) (= p 3)))) { $p = expression.NewOperacion($left.p, $op.text, $right.p, false, $op.line, localctx.(*Expre_relContext).GetOp().GetColumn()) }))))))
2023-10-08 02:14:47:204 left-recursion LogManager.java:25 expre_arit returns [interfaces.Expression p]
    :   ( {} op='-'<tokenIndex=1398> left=expre_arit<tokenIndex=1402,p=5>                                    { $p = expression.NewOperacion($left.p, $op.text, nil,      true,  $op.line, localctx.(*Expre_aritContext).GetOp().GetColumn()) } 
        | expre_valor<tokenIndex=1450>                                             { $p = $expre_valor.p } 
        | TK_PARA<tokenIndex=1456> expressions<tokenIndex=1458> TK_PARC<tokenIndex=1460>                             { $p = $expressions.p } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 4)}?<p=4> op=('*'<tokenIndex=1415>|'/'<tokenIndex=1417>|'%'<tokenIndex=1419>) right=expre_arit<tokenIndex=1424,p=5>       { $p = expression.NewOperacion($left.p, $op.text, $right.p, false, $op.line, localctx.(*Expre_aritContext).GetOp().GetColumn()) }
                  | {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> op=('+'<tokenIndex=1437>|'-'<tokenIndex=1439>) right=expre_arit<tokenIndex=1444,p=4>           { $p = expression.NewOperacion($left.p, $op.text, $right.p, false, $op.line, localctx.(*Expre_aritContext).GetOp().GetColumn()) }
        )*
    ;
2023-10-08 02:14:47:220 grammar LogManager.java:25 added: (RULE expre_arit (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (= op ('-' (ELEMENT_OPTIONS (= tokenIndex 1398)))) (= left (expre_arit (ELEMENT_OPTIONS (= tokenIndex 1402) (= p 5)))) { $p = expression.NewOperacion($left.p, $op.text, nil,      true,  $op.line, localctx.(*Expre_aritContext).GetOp().GetColumn()) }) (ALT (expre_valor (ELEMENT_OPTIONS (= tokenIndex 1450))) { $p = $expre_valor.p }) (ALT (TK_PARA (ELEMENT_OPTIONS (= tokenIndex 1456))) (expressions (ELEMENT_OPTIONS (= tokenIndex 1458))) (TK_PARC (ELEMENT_OPTIONS (= tokenIndex 1460))) { $p = $expressions.p })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 4)}? (ELEMENT_OPTIONS (= p 4))) (= op (SET ('*' (ELEMENT_OPTIONS (= tokenIndex 1415))) ('/' (ELEMENT_OPTIONS (= tokenIndex 1417))) ('%' (ELEMENT_OPTIONS (= tokenIndex 1419))))) (= right (expre_arit (ELEMENT_OPTIONS (= tokenIndex 1424) (= p 5)))) { $p = expression.NewOperacion($left.p, $op.text, $right.p, false, $op.line, localctx.(*Expre_aritContext).GetOp().GetColumn()) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (= op (SET ('+' (ELEMENT_OPTIONS (= tokenIndex 1437))) ('-' (ELEMENT_OPTIONS (= tokenIndex 1439))))) (= right (expre_arit (ELEMENT_OPTIONS (= tokenIndex 1444) (= p 4)))) { $p = expression.NewOperacion($left.p, $op.text, $right.p, false, $op.line, localctx.(*Expre_aritContext).GetOp().GetColumn()) }))))))
2023-10-08 02:14:47:360 grammar LogManager.java:25 import PRINT=1
2023-10-08 02:14:47:360 grammar LogManager.java:25 import VAR=2
2023-10-08 02:14:47:360 grammar LogManager.java:25 import LET=3
2023-10-08 02:14:47:360 grammar LogManager.java:25 import IF=4
2023-10-08 02:14:47:360 grammar LogManager.java:25 import ELSE=5
2023-10-08 02:14:47:360 grammar LogManager.java:25 import FOR=6
2023-10-08 02:14:47:360 grammar LogManager.java:25 import WHILE=7
2023-10-08 02:14:47:360 grammar LogManager.java:25 import SWITCH=8
2023-10-08 02:14:47:360 grammar LogManager.java:25 import CASE=9
2023-10-08 02:14:47:360 grammar LogManager.java:25 import DEFAULT=10
2023-10-08 02:14:47:360 grammar LogManager.java:25 import IN=11
2023-10-08 02:14:47:360 grammar LogManager.java:25 import BREAK=12
2023-10-08 02:14:47:360 grammar LogManager.java:25 import CONTINUE=13
2023-10-08 02:14:47:360 grammar LogManager.java:25 import RETURN=14
2023-10-08 02:14:47:360 grammar LogManager.java:25 import FUNC=15
2023-10-08 02:14:47:360 grammar LogManager.java:25 import STRUCT=16
2023-10-08 02:14:47:361 grammar LogManager.java:25 import R_INT=17
2023-10-08 02:14:47:361 grammar LogManager.java:25 import R_FLOAT=18
2023-10-08 02:14:47:361 grammar LogManager.java:25 import R_DOUBLE=19
2023-10-08 02:14:47:369 grammar LogManager.java:25 import R_BOOL=20
2023-10-08 02:14:47:370 grammar LogManager.java:25 import R_CHAR=21
2023-10-08 02:14:47:370 grammar LogManager.java:25 import R_STRING=22
2023-10-08 02:14:47:370 grammar LogManager.java:25 import TRUE=23
2023-10-08 02:14:47:371 grammar LogManager.java:25 import NUMBER=24
2023-10-08 02:14:47:371 grammar LogManager.java:25 import DOUBLE=25
2023-10-08 02:14:47:371 grammar LogManager.java:25 import CHAR=26
2023-10-08 02:14:47:372 grammar LogManager.java:25 import STRING=27
2023-10-08 02:14:47:372 grammar LogManager.java:25 import BOOLEAN=28
2023-10-08 02:14:47:372 grammar LogManager.java:25 import ID=29
2023-10-08 02:14:47:373 grammar LogManager.java:25 import TK_TRIPLEPUNTO=30
2023-10-08 02:14:47:373 grammar LogManager.java:25 import TK_PUNTO=31
2023-10-08 02:14:47:373 grammar LogManager.java:25 import TK_PUNTOCOMA=32
2023-10-08 02:14:47:373 grammar LogManager.java:25 import TK_COMA=33
2023-10-08 02:14:47:373 grammar LogManager.java:25 import TK_DOSPUNTOS=34
2023-10-08 02:14:47:373 grammar LogManager.java:25 import TK_IGUAL=35
2023-10-08 02:14:47:373 grammar LogManager.java:25 import TK_IGUALIGUAL=36
2023-10-08 02:14:47:373 grammar LogManager.java:25 import TK_MAYORIGUAL=37
2023-10-08 02:14:47:373 grammar LogManager.java:25 import TK_IGUALMAYOR=38
2023-10-08 02:14:47:373 grammar LogManager.java:25 import TK_MENOSMAYOR=39
2023-10-08 02:14:47:373 grammar LogManager.java:25 import TK_MENORIGUAL=40
2023-10-08 02:14:47:373 grammar LogManager.java:25 import TK_DIFIGUAL=41
2023-10-08 02:14:47:373 grammar LogManager.java:25 import TK_MAYOR=42
2023-10-08 02:14:47:373 grammar LogManager.java:25 import TK_MENOR=43
2023-10-08 02:14:47:373 grammar LogManager.java:25 import TK_MULT=44
2023-10-08 02:14:47:373 grammar LogManager.java:25 import TK_DIV=45
2023-10-08 02:14:47:374 grammar LogManager.java:25 import TK_MODULO=46
2023-10-08 02:14:47:374 grammar LogManager.java:25 import TK_MAS=47
2023-10-08 02:14:47:374 grammar LogManager.java:25 import TK_MENOS=48
2023-10-08 02:14:47:374 grammar LogManager.java:25 import TK_PARA=49
2023-10-08 02:14:47:374 grammar LogManager.java:25 import TK_PARC=50
2023-10-08 02:14:47:374 grammar LogManager.java:25 import TK_LLAVEA=51
2023-10-08 02:14:47:374 grammar LogManager.java:25 import TK_LLAVEC=52
2023-10-08 02:14:47:374 grammar LogManager.java:25 import TK_CORA=53
2023-10-08 02:14:47:374 grammar LogManager.java:25 import TK_CORC=54
2023-10-08 02:14:47:374 grammar LogManager.java:25 import TK_AND=55
2023-10-08 02:14:47:374 grammar LogManager.java:25 import TK_AMPERSAND=56
2023-10-08 02:14:47:374 grammar LogManager.java:25 import TK_OR=57
2023-10-08 02:14:47:374 grammar LogManager.java:25 import TK_BARRA=58
2023-10-08 02:14:47:374 grammar LogManager.java:25 import TK_NOT=59
2023-10-08 02:14:47:374 grammar LogManager.java:25 import WHITESPACE=60
2023-10-08 02:14:47:374 grammar LogManager.java:25 import TK_MULTI=61
2023-10-08 02:14:47:375 grammar LogManager.java:25 import TK_LINE=62
2023-10-08 02:14:47:375 grammar LogManager.java:25 import 'print'=1
2023-10-08 02:14:47:375 grammar LogManager.java:25 import 'var'=2
2023-10-08 02:14:47:375 grammar LogManager.java:25 import 'let'=3
2023-10-08 02:14:47:375 grammar LogManager.java:25 import 'if'=4
2023-10-08 02:14:47:375 grammar LogManager.java:25 import 'else'=5
2023-10-08 02:14:47:375 grammar LogManager.java:25 import 'for'=6
2023-10-08 02:14:47:375 grammar LogManager.java:25 import 'while'=7
2023-10-08 02:14:47:375 grammar LogManager.java:25 import 'switch'=8
2023-10-08 02:14:47:375 grammar LogManager.java:25 import 'case'=9
2023-10-08 02:14:47:375 grammar LogManager.java:25 import 'default'=10
2023-10-08 02:14:47:375 grammar LogManager.java:25 import 'in'=11
2023-10-08 02:14:47:375 grammar LogManager.java:25 import 'break'=12
2023-10-08 02:14:47:375 grammar LogManager.java:25 import 'continue'=13
2023-10-08 02:14:47:375 grammar LogManager.java:25 import 'return'=14
2023-10-08 02:14:47:375 grammar LogManager.java:25 import 'func'=15
2023-10-08 02:14:47:375 grammar LogManager.java:25 import 'struct'=16
2023-10-08 02:14:47:375 grammar LogManager.java:25 import 'Int'=17
2023-10-08 02:14:47:375 grammar LogManager.java:25 import 'Float'=18
2023-10-08 02:14:47:375 grammar LogManager.java:25 import 'Double'=19
2023-10-08 02:14:47:376 grammar LogManager.java:25 import 'Bool'=20
2023-10-08 02:14:47:376 grammar LogManager.java:25 import 'Character'=21
2023-10-08 02:14:47:376 grammar LogManager.java:25 import 'String'=22
2023-10-08 02:14:47:376 grammar LogManager.java:25 import 'true'=23
2023-10-08 02:14:47:376 grammar LogManager.java:25 import '...'=30
2023-10-08 02:14:47:376 grammar LogManager.java:25 import '.'=31
2023-10-08 02:14:47:376 grammar LogManager.java:25 import ';'=32
2023-10-08 02:14:47:376 grammar LogManager.java:25 import ','=33
2023-10-08 02:14:47:376 grammar LogManager.java:25 import ':'=34
2023-10-08 02:14:47:376 grammar LogManager.java:25 import '='=35
2023-10-08 02:14:47:376 grammar LogManager.java:25 import '=='=36
2023-10-08 02:14:47:376 grammar LogManager.java:25 import '>='=37
2023-10-08 02:14:47:376 grammar LogManager.java:25 import '=>'=38
2023-10-08 02:14:47:376 grammar LogManager.java:25 import '->'=39
2023-10-08 02:14:47:377 grammar LogManager.java:25 import '<='=40
2023-10-08 02:14:47:377 grammar LogManager.java:25 import '!='=41
2023-10-08 02:14:47:377 grammar LogManager.java:25 import '>'=42
2023-10-08 02:14:47:377 grammar LogManager.java:25 import '<'=43
2023-10-08 02:14:47:377 grammar LogManager.java:25 import '*'=44
2023-10-08 02:14:47:377 grammar LogManager.java:25 import '/'=45
2023-10-08 02:14:47:377 grammar LogManager.java:25 import '%'=46
2023-10-08 02:14:47:377 grammar LogManager.java:25 import '+'=47
2023-10-08 02:14:47:377 grammar LogManager.java:25 import '-'=48
2023-10-08 02:14:47:377 grammar LogManager.java:25 import '('=49
2023-10-08 02:14:47:377 grammar LogManager.java:25 import ')'=50
2023-10-08 02:14:47:377 grammar LogManager.java:25 import '{'=51
2023-10-08 02:14:47:377 grammar LogManager.java:25 import '}'=52
2023-10-08 02:14:47:377 grammar LogManager.java:25 import '['=53
2023-10-08 02:14:47:377 grammar LogManager.java:25 import ']'=54
2023-10-08 02:14:47:377 grammar LogManager.java:25 import '&&'=55
2023-10-08 02:14:47:377 grammar LogManager.java:25 import '&'=56
2023-10-08 02:14:47:377 grammar LogManager.java:25 import '||'=57
2023-10-08 02:14:47:377 grammar LogManager.java:25 import '|'=58
2023-10-08 02:14:47:377 grammar LogManager.java:25 import '!'=59
2023-10-08 02:14:47:389 grammar LogManager.java:25 tokens={PRINT=1, VAR=2, LET=3, IF=4, ELSE=5, FOR=6, WHILE=7, SWITCH=8, CASE=9, DEFAULT=10, IN=11, BREAK=12, CONTINUE=13, RETURN=14, FUNC=15, STRUCT=16, R_INT=17, R_FLOAT=18, R_DOUBLE=19, R_BOOL=20, R_CHAR=21, R_STRING=22, TRUE=23, NUMBER=24, DOUBLE=25, CHAR=26, STRING=27, BOOLEAN=28, ID=29, TK_TRIPLEPUNTO=30, TK_PUNTO=31, TK_PUNTOCOMA=32, TK_COMA=33, TK_DOSPUNTOS=34, TK_IGUAL=35, TK_IGUALIGUAL=36, TK_MAYORIGUAL=37, TK_IGUALMAYOR=38, TK_MENOSMAYOR=39, TK_MENORIGUAL=40, TK_DIFIGUAL=41, TK_MAYOR=42, TK_MENOR=43, TK_MULT=44, TK_DIV=45, TK_MODULO=46, TK_MAS=47, TK_MENOS=48, TK_PARA=49, TK_PARC=50, TK_LLAVEA=51, TK_LLAVEC=52, TK_CORA=53, TK_CORC=54, TK_AND=55, TK_AMPERSAND=56, TK_OR=57, TK_BARRA=58, TK_NOT=59, WHITESPACE=60, TK_MULTI=61, TK_LINE=62, 'print'=1, 'var'=2, 'let'=3, 'if'=4, 'else'=5, 'for'=6, 'while'=7, 'switch'=8, 'case'=9, 'default'=10, 'in'=11, 'break'=12, 'continue'=13, 'return'=14, 'func'=15, 'struct'=16, 'Int'=17, 'Float'=18, 'Double'=19, 'Bool'=20, 'Character'=21, 'String'=22, 'true'=23, '...'=30, '.'=31, ';'=32, ','=33, ':'=34, '='=35, '=='=36, '>='=37, '=>'=38, '->'=39, '<='=40, '!='=41, '>'=42, '<'=43, '*'=44, '/'=45, '%'=46, '+'=47, '-'=48, '('=49, ')'=50, '{'=51, '}'=52, '['=53, ']'=54, '&&'=55, '&'=56, '||'=57, '|'=58, '!'=59}
2023-10-08 02:14:47:392 semantics LogManager.java:25 tokens={EOF=-1, PRINT=1, VAR=2, LET=3, IF=4, ELSE=5, FOR=6, WHILE=7, SWITCH=8, CASE=9, DEFAULT=10, IN=11, BREAK=12, CONTINUE=13, RETURN=14, FUNC=15, STRUCT=16, R_INT=17, R_FLOAT=18, R_DOUBLE=19, R_BOOL=20, R_CHAR=21, R_STRING=22, TRUE=23, NUMBER=24, DOUBLE=25, CHAR=26, STRING=27, BOOLEAN=28, ID=29, TK_TRIPLEPUNTO=30, TK_PUNTO=31, TK_PUNTOCOMA=32, TK_COMA=33, TK_DOSPUNTOS=34, TK_IGUAL=35, TK_IGUALIGUAL=36, TK_MAYORIGUAL=37, TK_IGUALMAYOR=38, TK_MENOSMAYOR=39, TK_MENORIGUAL=40, TK_DIFIGUAL=41, TK_MAYOR=42, TK_MENOR=43, TK_MULT=44, TK_DIV=45, TK_MODULO=46, TK_MAS=47, TK_MENOS=48, TK_PARA=49, TK_PARC=50, TK_LLAVEA=51, TK_LLAVEC=52, TK_CORA=53, TK_CORC=54, TK_AND=55, TK_AMPERSAND=56, TK_OR=57, TK_BARRA=58, TK_NOT=59, WHITESPACE=60, TK_MULTI=61, TK_LINE=62}
2023-10-08 02:14:47:392 semantics LogManager.java:25 strings={'print'=1, 'var'=2, 'let'=3, 'if'=4, 'else'=5, 'for'=6, 'while'=7, 'switch'=8, 'case'=9, 'default'=10, 'in'=11, 'break'=12, 'continue'=13, 'return'=14, 'func'=15, 'struct'=16, 'Int'=17, 'Float'=18, 'Double'=19, 'Bool'=20, 'Character'=21, 'String'=22, 'true'=23, '...'=30, '.'=31, ';'=32, ','=33, ':'=34, '='=35, '=='=36, '>='=37, '=>'=38, '->'=39, '<='=40, '!='=41, '>'=42, '<'=43, '*'=44, '/'=45, '%'=46, '+'=47, '-'=48, '('=49, ')'=50, '{'=51, '}'=52, '['=53, ']'=54, '&&'=55, '&'=56, '||'=57, '|'=58, '!'=59}
