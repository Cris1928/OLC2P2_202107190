2023-11-01 18:05:35:910 grammar LogManager.java:25 before: (PARSER_GRAMMAR Swiftgrammar (OPTIONS (= tokenVocab Swiftlexer)) (@ header {

import "OLC2/Compilador/interfaces"
import "OLC2/Compilador/instruccion"
import "OLC2/Compilador/expression"
import "OLC2/Compilador/instruccion/ternario"
import arrayList "github.com/colegno/arraylist"

}) (RULES (RULE start (returns *arrayList.List lista) (BLOCK (ALT instrucciones EOF {$lista = $instrucciones.l}))) (RULE instrucciones (returns *arrayList.List l) (@ init {
    $l =  arrayList.New()
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= list instruccion)))) {
        listInt := localctx.(*InstruccionesContext).GetList()
        for _, e := range listInt {
            $l.Add(e.GetInstr())
        }
    }))) (RULE instruccion (returns interfaces.Instruction instr) (BLOCK (ALT instruccion_println { $instr = $instruccion_println.instr               }) (ALT instruccion_structs_declaracion) (ALT instruccion_declaracion { $instr = $instruccion_declaracion.instr           }) (ALT instruccion_asignacion { $instr = $instruccion_asignacion.instr            }) (ALT instr_structs_assignment) (ALT instruccion_if { $instr = $instruccion_if.instr                    }) (ALT instruccion_for_in { $instr = $instruccion_for_in.instr                }) (ALT instruccion_while { $instr = $instruccion_while.instr                 }) (ALT instruccion_while_true { $instr = $instruccion_while_true.instr                  }) (ALT instruccion_switch) (ALT instruccion_break) (ALT instruccion_continue) (ALT instruccion_func { $instr = $instruccion_func.instr                  }) (ALT instruccion_llamada) (ALT instruccion_return) (ALT instr_structs_declaration))) (RULE instruccion_println (returns interfaces.Instruction instr) (BLOCK (ALT PRINT TK_PARA primitivo TK_PARC { $instr = instruction.NewPrintln(nil, $primitivo.p,       "-1",         $PRINT.line, localctx.(*Instruccion_printlnContext).Get_PRINT().GetColumn()) }) (ALT PRINT TK_PARA STRING TK_COMA list_expression TK_PARC { $instr = instruction.NewPrintln($list_expression.l, nil,$STRING.text[1:len($STRING.text)-1], $PRINT.line, localctx.(*Instruccion_printlnContext).Get_PRINT().GetColumn()) }) (ALT PRINT TK_PARA expressions TK_PARC { $instr = instruction.NewPrintln(nil, $expressions.p,       "-1",         $PRINT.line, localctx.(*Instruccion_printlnContext).Get_PRINT().GetColumn()) }))) (RULE instruccion_declaracion (returns interfaces.Instruction instr) (BLOCK (ALT VAR ID TK_IGUAL expressions { $instr = instruction.NewDeclaration($ID.text, interfaces.NULL,      $expressions.p, true,  $VAR.line, localctx.(*Instruccion_declaracionContext).Get_VAR().GetColumn()) }) (ALT VAR ID TK_DOSPUNTOS instruccion_tipo { $instr = instruction.NewDeclaration($ID.text, $instruccion_tipo.tipo_exp,  nil,           true,  $VAR.line, localctx.(*Instruccion_declaracionContext).Get_VAR().GetColumn()) }) (ALT VAR ID TK_DOSPUNTOS instruccion_tipo TK_IGUAL expressions { $instr = instruction.NewDeclaration($ID.text, $instruccion_tipo.tipo_exp, $expressions.p, true,  $VAR.line, localctx.(*Instruccion_declaracionContext).Get_VAR().GetColumn()) }) (ALT LET ID TK_IGUAL expressions { $instr = instruction.NewDeclaration($ID.text, interfaces.NULL,      $expressions.p, false, $LET.line, localctx.(*Instruccion_declaracionContext).Get_LET().GetColumn()) }) (ALT LET ID TK_DOSPUNTOS instruccion_tipo { $instr = instruction.NewDeclaration($ID.text, $instruccion_tipo.tipo_exp, nil,            false, $LET.line, localctx.(*Instruccion_declaracionContext).Get_LET().GetColumn()) }) (ALT LET ID TK_DOSPUNTOS instruccion_tipo TK_IGUAL expressions { $instr = instruction.NewDeclaration($ID.text, $instruccion_tipo.tipo_exp, $expressions.p, false, $LET.line, localctx.(*Instruccion_declaracionContext).Get_LET().GetColumn()) }))) (RULE instruccion_asignacion (returns interfaces.Instruction instr) (BLOCK (ALT ID TK_IGUAL expressions { $instr = instruction.NewAssignment($ID.text, $expressions.p, $ID.line, localctx.(*Instruccion_asignacionContext).Get_ID().GetColumn()) }))) (RULE instruccion_if (returns interfaces.Instruction instr) (BLOCK (ALT IF expressions TK_LLAVEA (= left_instr instrucciones) TK_LLAVEC { $instr = instruction.NewIf($expressions.p, $left_instr.l, nil, nil,$IF.line, localctx.(*Instruccion_ifContext).Get_IF().GetColumn()) }) (ALT IF expressions TK_LLAVEA (= left_instr instrucciones) TK_LLAVEC ELSE TK_LLAVEA (= right_instr instrucciones) TK_LLAVEC { $instr = instruction.NewIf($expressions.p, $left_instr.l, $right_instr.l, nil,     $IF.line, localctx.(*Instruccion_ifContext).Get_IF().GetColumn()) }) (ALT IF expressions TK_LLAVEA (= left_instr instrucciones) TK_LLAVEC ELSE instr_else_if { $instr = instruction.NewIf($expressions.p, $left_instr.l, nil, $instr_else_if.l,  $IF.line, localctx.(*Instruccion_ifContext).Get_IF().GetColumn()) }))) (RULE instr_else_if (returns *arrayList.List l) (@ init {
    $l =  arrayList.New()
  }) (BLOCK (ALT (* (BLOCK (ALT (+= e instruccion_if)))) {
        listInt := localctx.(*Instr_else_ifContext).GetE()
        for _, e := range listInt {
            $l.Add(e.GetInstr())
        }
    }))) (RULE instruccion_ternario (returns interfaces.Expression p) (BLOCK (ALT IF (= cond expressions) TK_LLAVEA (= left_instr expressions) TK_LLAVEC { $p = ternario.NewIf($cond.p, $left_instr.p, nil, nil,                       $IF.line, localctx.(*Instruccion_ternarioContext).Get_IF().GetColumn()) }) (ALT IF (= cond expressions) TK_LLAVEA (= left_instr expressions) TK_LLAVEC ELSE TK_LLAVEA (= right_instr expressions) TK_LLAVEC { $p = ternario.NewIf($cond.p, $left_instr.p, $right_instr.p, nil,             $IF.line, localctx.(*Instruccion_ternarioContext).Get_IF().GetColumn()) }) (ALT IF (= cond expressions) TK_LLAVEA (= left_instr expressions) TK_LLAVEC ELSE instr_else_if_ternario { $p = ternario.NewIf($cond.p, $left_instr.p, nil, $instr_else_if_ternario.l, $IF.line, localctx.(*Instruccion_ternarioContext).Get_IF().GetColumn()) }))) (RULE instr_else_if_ternario (returns *arrayList.List l) (@ init {
    $l =  arrayList.New()
  }) (BLOCK (ALT (* (BLOCK (ALT (+= e instruccion_ternario)))) {
        listInt := localctx.(*Instr_else_if_ternarioContext).GetE()
        for _, e := range listInt {
            $l.Add(e.GetP())
        }
    }))) (RULE instruccion_switch (BLOCK (ALT SWITCH expressions TK_LLAVEA list_case block_default TK_LLAVEC) (ALT SWITCH expressions TK_LLAVEA block_default TK_LLAVEC))) (RULE list_case (BLOCK (ALT (+ (BLOCK (ALT (+= e instruccion_case))))))) (RULE instruccion_case (BLOCK (ALT list_expre_case TK_DOSPUNTOS TK_LLAVEA instrucciones TK_LLAVEC) (ALT list_expre_case TK_DOSPUNTOS block_instr_switch TK_COMA))) (RULE list_expre_case (BLOCK (ALT (+ (BLOCK (ALT (+= e block_case))))))) (RULE block_case (BLOCK (ALT expressions TK_BARRA) (ALT expressions))) (RULE block_instr_switch (BLOCK (ALT (+= list instruccion)))) (RULE instr_default (BLOCK (ALT CASE ID TK_DOSPUNTOS TK_LLAVEA instrucciones TK_LLAVEC) (ALT CASE ID TK_DOSPUNTOS block_instr_switch))) (RULE block_default (BLOCK (ALT (+ (BLOCK (ALT (+= e instr_default))))))) (RULE instruccion_switch_ternario (BLOCK (ALT SWITCH expressions TK_LLAVEA list_case_ternario instr_default_ter TK_LLAVEC) (ALT SWITCH expressions TK_LLAVEA instr_default_ter TK_LLAVEC))) (RULE list_case_ternario (BLOCK (ALT (+ (BLOCK (ALT (+= e instr_case_ter))))))) (RULE instr_case_ter (BLOCK (ALT list_expre_case_ter TK_DOSPUNTOS expressions) (ALT list_expre_case_ter TK_DOSPUNTOS TK_LLAVEA expressions TK_LLAVEC))) (RULE list_expre_case_ter (BLOCK (ALT (+ (BLOCK (ALT (+= e block_case_ter))))))) (RULE block_case_ter (BLOCK (ALT expressions TK_BARRA) (ALT expressions))) (RULE instr_default_ter (BLOCK (ALT CASE ID TK_DOSPUNTOS expressions) (ALT CASE ID TK_DOSPUNTOS TK_LLAVEA expressions TK_LLAVEC))) (RULE instruccion_while (returns interfaces.Instruction instr) (BLOCK (ALT WHILE expressions TK_LLAVEA instrucciones TK_LLAVEC { $instr = instruction.NewWhile($expressions.p, $instrucciones.l, $WHILE.line, localctx.(*Instruccion_whileContext).Get_WHILE().GetColumn()) }))) (RULE instruccion_for_in (returns interfaces.Instruction instr) (BLOCK (ALT FOR ID IN (= left expressions) TK_TRIPLEPUNTO (= right expressions) TK_LLAVEA instrucciones TK_LLAVEC { $instr = instruction.NewFor($ID.text, interfaces.INTEGER, $left.p, $right.p, $instrucciones.l, $FOR.line, localctx.(*Instruccion_for_inContext).Get_FOR().GetColumn()) }) (ALT FOR ID IN (= left expressions) TK_LLAVEA instrucciones TK_LLAVEC { $instr = instruction.NewFor($ID.text, interfaces.STRING,  $left.p, nil, $instrucciones.l,      $FOR.line, localctx.(*Instruccion_for_inContext).Get_FOR().GetColumn()) }))) (RULE instruccion_while_true (returns interfaces.Instruction instr) (BLOCK (ALT WHILE TRUE TK_LLAVEA instrucciones TK_LLAVEC { $instr = instruction.NewWtrue($instrucciones.l, $WHILE.line, localctx.(*Instruccion_while_trueContext).Get_WHILE().GetColumn()) }))) (RULE instruccion_while_true_ternario (returns interfaces.Expression p) (BLOCK (ALT WHILE TRUE TK_LLAVEA instrucciones TK_LLAVEC { $p = ternario.NewWhileter($instrucciones.l, $WHILE.line, localctx.(*Instruccion_while_true_ternarioContext).Get_WHILE().GetColumn()) }))) (RULE instruccion_break (BLOCK (ALT BREAK) (ALT BREAK expressions))) (RULE instruccion_continue (BLOCK (ALT CONTINUE))) (RULE instruccion_return (returns interfaces.Instruction instr) (BLOCK (ALT RETURN expressions { $instr = instruction.NewReturn($expressions.p, $RETURN.line, localctx.(*Instruccion_returnContext).Get_RETURN().GetColumn()) }))) (RULE instruccion_func (returns interfaces.Instruction instr) (BLOCK (ALT FUNC ID TK_PARA TK_PARC TK_LLAVEA instrucciones TK_LLAVEC { $instr = instruction.NewFunction($ID.text, nil, $instrucciones.l, interfaces.NULL,      $FUNC.line, localctx.(*Instruccion_funcContext).Get_FUNC().GetColumn()) }) (ALT FUNC ID TK_PARA TK_PARC TK_MENOSMAYOR instruccion_tipo TK_LLAVEA instrucciones TK_LLAVEC { $instr = instruction.NewFunction($ID.text, nil, $instrucciones.l, $instruccion_tipo.tipo_exp, $FUNC.line, localctx.(*Instruccion_funcContext).Get_FUNC().GetColumn()) }) (ALT FUNC ID TK_PARA list_function_parameters TK_PARC TK_LLAVEA instrucciones TK_LLAVEC { $instr = instruction.NewFunction($ID.text, $list_function_parameters.l, $instrucciones.l, interfaces.NULL,      $FUNC.line, localctx.(*Instruccion_funcContext).Get_FUNC().GetColumn()) }) (ALT FUNC ID TK_PARA list_function_parameters TK_PARC TK_MENOSMAYOR instruccion_tipo TK_LLAVEA instrucciones TK_LLAVEC { $instr = instruction.NewFunction($ID.text, $list_function_parameters.l, $instrucciones.l, $instruccion_tipo.tipo_exp, $FUNC.line, localctx.(*Instruccion_funcContext).Get_FUNC().GetColumn()) }))) (RULE list_function_parameters (returns *arrayList.List l) (@ init {
    $l =  arrayList.New()
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= e block_parameters_fn)))) {
        listInt := localctx.(*List_function_parametersContext).GetE()
        for _, e := range listInt {
            $l.Add(e.GetInstr())
        }
    }))) (RULE block_parameters_fn (returns interfaces.Instruction instr) (BLOCK (ALT ID TK_DOSPUNTOS instruccion_tipo TK_COMA { $instr = instruction.NewListExprefunc($ID.text, $instruccion_tipo.tipo_exp, $ID.line, localctx.(*Block_parameters_fnContext).Get_ID().GetColumn()) }) (ALT ID TK_DOSPUNTOS instruccion_tipo { $instr = instruction.NewListExprefunc($ID.text, $instruccion_tipo.tipo_exp, $ID.line, localctx.(*Block_parameters_fnContext).Get_ID().GetColumn()) }))) (RULE instruccion_llamada (BLOCK (ALT ID TK_PARA TK_PARC) (ALT ID TK_PARA list_expression TK_PARC))) (RULE instr_llamada_expre (BLOCK (ALT ID TK_PARA TK_PARC) (ALT ID TK_PARA list_expression TK_PARC))) (RULE instruccion_structs_declaracion (BLOCK (ALT STRUCT ID TK_LLAVEA list_struct_parameters TK_LLAVEC))) (RULE list_struct_parameters (BLOCK (ALT (+ (BLOCK (ALT (+= e block_structs_parameters))))))) (RULE block_structs_parameters (BLOCK (ALT ID TK_DOSPUNTOS instruccion_tipo TK_COMA) (ALT ID TK_DOSPUNTOS instruccion_tipo))) (RULE instr_arrays_identifier (BLOCK (ALT ID list_arrays_parameters_id))) (RULE list_arrays_parameters_id (BLOCK (ALT (+ (BLOCK (ALT (+= e block_arrays_identifier))))))) (RULE block_arrays_identifier (BLOCK (ALT TK_CORA expressions TK_CORC))) (RULE instr_structs_declaration (BLOCK (ALT VAR (= left ID) TK_IGUAL (= right ID) TK_LLAVEA list_struct_parameters_decla TK_LLAVEC) (ALT LET (= left ID) TK_IGUAL (= right ID) TK_LLAVEA list_struct_parameters_decla TK_LLAVEC))) (RULE list_struct_parameters_decla (BLOCK (ALT (+ (BLOCK (ALT (+= e block_structs_parameters_decla))))))) (RULE block_structs_parameters_decla (BLOCK (ALT ID TK_DOSPUNTOS expressions) (ALT ID TK_DOSPUNTOS expressions TK_COMA))) (RULE instr_structs_identifier (BLOCK (ALT ID list_struct_parameters_id))) (RULE list_struct_parameters_id (BLOCK (ALT (+ (BLOCK (ALT (+= e block_structs_identifier))))))) (RULE block_structs_identifier (BLOCK (ALT TK_PUNTO ID))) (RULE instr_structs_assignment (BLOCK (ALT ID list_struct_parameters_id TK_IGUAL expressions))) (RULE instruccion_tipo (returns interfaces.TypeExpression tipo_exp) (BLOCK (ALT R_INT {$tipo_exp = interfaces.INTEGER}) (ALT R_FLOAT {$tipo_exp = interfaces.FLOAT}) (ALT R_STRING {$tipo_exp = interfaces.STRING}) (ALT R_BOOL {$tipo_exp = interfaces.BOOLEAN}) (ALT R_CHAR {$tipo_exp = interfaces.CHAR}))) (RULE list_expression (returns *arrayList.List l) (@ init {
    $l =  arrayList.New()
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= e block_list_expression)))) {
        listInt := localctx.(*List_expressionContext).GetE()
        for _, e := range listInt {
            $l.Add(e.GetP())
        }
    }))) (RULE block_list_expression (returns interfaces.Expression p) (BLOCK (ALT expressions TK_COMA { $p =  instruction.NewListExpre($expressions.p) }) (ALT expressions { $p =  instruction.NewListExpre($expressions.p) }))) (RULE expressions (returns interfaces.Expression p) (BLOCK (ALT expre_log { $p = $expre_log.p }) (ALT expre_arit { $p = $expre_arit.p }) (ALT expre_rel { $p = $expre_rel.p }))) (RULE expre_log (returns interfaces.Expression p) (BLOCK (ALT (= op '!') (= left expre_log) { $p = expression.NewOperacion($left.p, $op.text, nil,      true,  $op.line, localctx.(*Expre_logContext).GetOp().GetColumn()) }) (ALT (= left expre_log) (= op (BLOCK (ALT '&&') (ALT '||'))) (= right expre_log) { $p = expression.NewOperacion($left.p, $op.text, $right.p, false, $op.line, localctx.(*Expre_logContext).GetOp().GetColumn()) }) (ALT expre_rel { $p = $expre_rel.p }))) (RULE expre_rel (returns interfaces.Expression p) (BLOCK (ALT (= left expre_rel) (= op (BLOCK (ALT '<') (ALT '<=') (ALT '>=') (ALT '>') (ALT '!=') (ALT '=='))) (= right expre_rel) { $p = expression.NewOperacion($left.p, $op.text, $right.p, false, $op.line, localctx.(*Expre_relContext).GetOp().GetColumn()) }) (ALT expre_arit { $p = $expre_arit.p }))) (RULE expre_arit (returns interfaces.Expression p) (BLOCK (ALT (= op '-') (= left expre_arit) { $p = expression.NewOperacion($left.p, $op.text, nil,      true,  $op.line, localctx.(*Expre_aritContext).GetOp().GetColumn()) }) (ALT (= left expre_arit) (= op (BLOCK (ALT '*') (ALT '/') (ALT '%'))) (= right expre_arit) { $p = expression.NewOperacion($left.p, $op.text, $right.p, false, $op.line, localctx.(*Expre_aritContext).GetOp().GetColumn()) }) (ALT (= left expre_arit) (= op (BLOCK (ALT '+') (ALT '-'))) (= right expre_arit) { $p = expression.NewOperacion($left.p, $op.text, $right.p, false, $op.line, localctx.(*Expre_aritContext).GetOp().GetColumn()) }) (ALT expre_valor { $p = $expre_valor.p }) (ALT TK_PARA expressions TK_PARC { $p = $expressions.p }))) (RULE expre_valor (returns interfaces.Expression p) (BLOCK (ALT primitivo { $p = $primitivo.p }))) (RULE primitivo (returns interfaces.Expression p) (BLOCK (ALT NUMBER {
              num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }

            $p = expression.NewPrimitivo(num, interfaces.INTEGER, interfaces.NULL, $NUMBER.line, localctx.(*PrimitivoContext).Get_NUMBER().GetColumn())
       }) (ALT DOUBLE {  
                num,err := strconv.ParseFloat($DOUBLE.text, 64)
                if err!= nil{
                    fmt.Println(err)
                }
            $p = expression.NewPrimitivo(num, interfaces.FLOAT, interfaces.NULL, $DOUBLE.line, localctx.(*PrimitivoContext).Get_DOUBLE().GetColumn())
              }) (ALT STRING { 
              str:= $STRING.text[1:len($STRING.text)-1]
              $p = expression.NewPrimitivo(str, interfaces.STRING, interfaces.NULL, $STRING.line, localctx.(*PrimitivoContext).Get_STRING().GetColumn())
            
            }) (ALT BOOLEAN { 
          
              exp,_ := strconv.ParseBool($BOOLEAN.text)
              $p = expression.NewPrimitivo(exp, interfaces.BOOLEAN, interfaces.NULL, $BOOLEAN.line, localctx.(*PrimitivoContext).Get_BOOLEAN().GetColumn())
            }) (ALT CHAR {

            str:= $CHAR.text[1]
            $p = expression.NewPrimitivo(string(str), interfaces.CHAR, interfaces.NULL, $CHAR.line, localctx.(*PrimitivoContext).Get_CHAR().GetColumn())
          
          }) (ALT instr_llamada_expre) (ALT instr_structs_identifier) (ALT instr_arrays_identifier) (ALT ID { $p = instruction.NewIdentifier($ID.text, $ID.line, localctx.(*PrimitivoContext).Get_ID().GetColumn()) }) (ALT instruccion_ternario { $p = $instruccion_ternario.p }) (ALT instruccion_switch_ternario) (ALT instruccion_while_true_ternario { $p = $instruccion_while_true_ternario.p })))))
2023-11-01 18:05:36:119 grammar LogManager.java:25 after: (PARSER_GRAMMAR Swiftgrammar (OPTIONS (= tokenVocab Swiftlexer)) (@ header {

import "OLC2/Compilador/interfaces"
import "OLC2/Compilador/instruccion"
import "OLC2/Compilador/expression"
import "OLC2/Compilador/instruccion/ternario"
import arrayList "github.com/colegno/arraylist"

}) (RULES (RULE start (returns *arrayList.List lista) (BLOCK (ALT instrucciones EOF {$lista = $instrucciones.l}))) (RULE instrucciones (returns *arrayList.List l) (@ init {
    $l =  arrayList.New()
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= list instruccion)))) {
        listInt := localctx.(*InstruccionesContext).GetList()
        for _, e := range listInt {
            $l.Add(e.GetInstr())
        }
    }))) (RULE instruccion (returns interfaces.Instruction instr) (BLOCK (ALT instruccion_println { $instr = $instruccion_println.instr               }) (ALT instruccion_structs_declaracion) (ALT instruccion_declaracion { $instr = $instruccion_declaracion.instr           }) (ALT instruccion_asignacion { $instr = $instruccion_asignacion.instr            }) (ALT instr_structs_assignment) (ALT instruccion_if { $instr = $instruccion_if.instr                    }) (ALT instruccion_for_in { $instr = $instruccion_for_in.instr                }) (ALT instruccion_while { $instr = $instruccion_while.instr                 }) (ALT instruccion_while_true { $instr = $instruccion_while_true.instr                  }) (ALT instruccion_switch) (ALT instruccion_break) (ALT instruccion_continue) (ALT instruccion_func { $instr = $instruccion_func.instr                  }) (ALT instruccion_llamada) (ALT instruccion_return) (ALT instr_structs_declaration))) (RULE instruccion_println (returns interfaces.Instruction instr) (BLOCK (ALT PRINT TK_PARA primitivo TK_PARC { $instr = instruction.NewPrintln(nil, $primitivo.p,       "-1",         $PRINT.line, localctx.(*Instruccion_printlnContext).Get_PRINT().GetColumn()) }) (ALT PRINT TK_PARA STRING TK_COMA list_expression TK_PARC { $instr = instruction.NewPrintln($list_expression.l, nil,$STRING.text[1:len($STRING.text)-1], $PRINT.line, localctx.(*Instruccion_printlnContext).Get_PRINT().GetColumn()) }) (ALT PRINT TK_PARA expressions TK_PARC { $instr = instruction.NewPrintln(nil, $expressions.p,       "-1",         $PRINT.line, localctx.(*Instruccion_printlnContext).Get_PRINT().GetColumn()) }))) (RULE instruccion_declaracion (returns interfaces.Instruction instr) (BLOCK (ALT VAR ID TK_IGUAL expressions { $instr = instruction.NewDeclaration($ID.text, interfaces.NULL,      $expressions.p, true,  $VAR.line, localctx.(*Instruccion_declaracionContext).Get_VAR().GetColumn()) }) (ALT VAR ID TK_DOSPUNTOS instruccion_tipo { $instr = instruction.NewDeclaration($ID.text, $instruccion_tipo.tipo_exp,  nil,           true,  $VAR.line, localctx.(*Instruccion_declaracionContext).Get_VAR().GetColumn()) }) (ALT VAR ID TK_DOSPUNTOS instruccion_tipo TK_IGUAL expressions { $instr = instruction.NewDeclaration($ID.text, $instruccion_tipo.tipo_exp, $expressions.p, true,  $VAR.line, localctx.(*Instruccion_declaracionContext).Get_VAR().GetColumn()) }) (ALT LET ID TK_IGUAL expressions { $instr = instruction.NewDeclaration($ID.text, interfaces.NULL,      $expressions.p, false, $LET.line, localctx.(*Instruccion_declaracionContext).Get_LET().GetColumn()) }) (ALT LET ID TK_DOSPUNTOS instruccion_tipo { $instr = instruction.NewDeclaration($ID.text, $instruccion_tipo.tipo_exp, nil,            false, $LET.line, localctx.(*Instruccion_declaracionContext).Get_LET().GetColumn()) }) (ALT LET ID TK_DOSPUNTOS instruccion_tipo TK_IGUAL expressions { $instr = instruction.NewDeclaration($ID.text, $instruccion_tipo.tipo_exp, $expressions.p, false, $LET.line, localctx.(*Instruccion_declaracionContext).Get_LET().GetColumn()) }))) (RULE instruccion_asignacion (returns interfaces.Instruction instr) (BLOCK (ALT ID TK_IGUAL expressions { $instr = instruction.NewAssignment($ID.text, $expressions.p, $ID.line, localctx.(*Instruccion_asignacionContext).Get_ID().GetColumn()) }))) (RULE instruccion_if (returns interfaces.Instruction instr) (BLOCK (ALT IF expressions TK_LLAVEA (= left_instr instrucciones) TK_LLAVEC { $instr = instruction.NewIf($expressions.p, $left_instr.l, nil, nil,$IF.line, localctx.(*Instruccion_ifContext).Get_IF().GetColumn()) }) (ALT IF expressions TK_LLAVEA (= left_instr instrucciones) TK_LLAVEC ELSE TK_LLAVEA (= right_instr instrucciones) TK_LLAVEC { $instr = instruction.NewIf($expressions.p, $left_instr.l, $right_instr.l, nil,     $IF.line, localctx.(*Instruccion_ifContext).Get_IF().GetColumn()) }) (ALT IF expressions TK_LLAVEA (= left_instr instrucciones) TK_LLAVEC ELSE instr_else_if { $instr = instruction.NewIf($expressions.p, $left_instr.l, nil, $instr_else_if.l,  $IF.line, localctx.(*Instruccion_ifContext).Get_IF().GetColumn()) }))) (RULE instr_else_if (returns *arrayList.List l) (@ init {
    $l =  arrayList.New()
  }) (BLOCK (ALT (* (BLOCK (ALT (+= e instruccion_if)))) {
        listInt := localctx.(*Instr_else_ifContext).GetE()
        for _, e := range listInt {
            $l.Add(e.GetInstr())
        }
    }))) (RULE instruccion_ternario (returns interfaces.Expression p) (BLOCK (ALT IF (= cond expressions) TK_LLAVEA (= left_instr expressions) TK_LLAVEC { $p = ternario.NewIf($cond.p, $left_instr.p, nil, nil,                       $IF.line, localctx.(*Instruccion_ternarioContext).Get_IF().GetColumn()) }) (ALT IF (= cond expressions) TK_LLAVEA (= left_instr expressions) TK_LLAVEC ELSE TK_LLAVEA (= right_instr expressions) TK_LLAVEC { $p = ternario.NewIf($cond.p, $left_instr.p, $right_instr.p, nil,             $IF.line, localctx.(*Instruccion_ternarioContext).Get_IF().GetColumn()) }) (ALT IF (= cond expressions) TK_LLAVEA (= left_instr expressions) TK_LLAVEC ELSE instr_else_if_ternario { $p = ternario.NewIf($cond.p, $left_instr.p, nil, $instr_else_if_ternario.l, $IF.line, localctx.(*Instruccion_ternarioContext).Get_IF().GetColumn()) }))) (RULE instr_else_if_ternario (returns *arrayList.List l) (@ init {
    $l =  arrayList.New()
  }) (BLOCK (ALT (* (BLOCK (ALT (+= e instruccion_ternario)))) {
        listInt := localctx.(*Instr_else_if_ternarioContext).GetE()
        for _, e := range listInt {
            $l.Add(e.GetP())
        }
    }))) (RULE instruccion_switch (BLOCK (ALT SWITCH expressions TK_LLAVEA list_case block_default TK_LLAVEC) (ALT SWITCH expressions TK_LLAVEA block_default TK_LLAVEC))) (RULE list_case (BLOCK (ALT (+ (BLOCK (ALT (+= e instruccion_case))))))) (RULE instruccion_case (BLOCK (ALT list_expre_case TK_DOSPUNTOS TK_LLAVEA instrucciones TK_LLAVEC) (ALT list_expre_case TK_DOSPUNTOS block_instr_switch TK_COMA))) (RULE list_expre_case (BLOCK (ALT (+ (BLOCK (ALT (+= e block_case))))))) (RULE block_case (BLOCK (ALT expressions TK_BARRA) (ALT expressions))) (RULE block_instr_switch (BLOCK (ALT (+= list instruccion)))) (RULE instr_default (BLOCK (ALT CASE ID TK_DOSPUNTOS TK_LLAVEA instrucciones TK_LLAVEC) (ALT CASE ID TK_DOSPUNTOS block_instr_switch))) (RULE block_default (BLOCK (ALT (+ (BLOCK (ALT (+= e instr_default))))))) (RULE instruccion_switch_ternario (BLOCK (ALT SWITCH expressions TK_LLAVEA list_case_ternario instr_default_ter TK_LLAVEC) (ALT SWITCH expressions TK_LLAVEA instr_default_ter TK_LLAVEC))) (RULE list_case_ternario (BLOCK (ALT (+ (BLOCK (ALT (+= e instr_case_ter))))))) (RULE instr_case_ter (BLOCK (ALT list_expre_case_ter TK_DOSPUNTOS expressions) (ALT list_expre_case_ter TK_DOSPUNTOS TK_LLAVEA expressions TK_LLAVEC))) (RULE list_expre_case_ter (BLOCK (ALT (+ (BLOCK (ALT (+= e block_case_ter))))))) (RULE block_case_ter (BLOCK (ALT expressions TK_BARRA) (ALT expressions))) (RULE instr_default_ter (BLOCK (ALT CASE ID TK_DOSPUNTOS expressions) (ALT CASE ID TK_DOSPUNTOS TK_LLAVEA expressions TK_LLAVEC))) (RULE instruccion_while (returns interfaces.Instruction instr) (BLOCK (ALT WHILE expressions TK_LLAVEA instrucciones TK_LLAVEC { $instr = instruction.NewWhile($expressions.p, $instrucciones.l, $WHILE.line, localctx.(*Instruccion_whileContext).Get_WHILE().GetColumn()) }))) (RULE instruccion_for_in (returns interfaces.Instruction instr) (BLOCK (ALT FOR ID IN (= left expressions) TK_TRIPLEPUNTO (= right expressions) TK_LLAVEA instrucciones TK_LLAVEC { $instr = instruction.NewFor($ID.text, interfaces.INTEGER, $left.p, $right.p, $instrucciones.l, $FOR.line, localctx.(*Instruccion_for_inContext).Get_FOR().GetColumn()) }) (ALT FOR ID IN (= left expressions) TK_LLAVEA instrucciones TK_LLAVEC { $instr = instruction.NewFor($ID.text, interfaces.STRING,  $left.p, nil, $instrucciones.l,      $FOR.line, localctx.(*Instruccion_for_inContext).Get_FOR().GetColumn()) }))) (RULE instruccion_while_true (returns interfaces.Instruction instr) (BLOCK (ALT WHILE TRUE TK_LLAVEA instrucciones TK_LLAVEC { $instr = instruction.NewWtrue($instrucciones.l, $WHILE.line, localctx.(*Instruccion_while_trueContext).Get_WHILE().GetColumn()) }))) (RULE instruccion_while_true_ternario (returns interfaces.Expression p) (BLOCK (ALT WHILE TRUE TK_LLAVEA instrucciones TK_LLAVEC { $p = ternario.NewWhileter($instrucciones.l, $WHILE.line, localctx.(*Instruccion_while_true_ternarioContext).Get_WHILE().GetColumn()) }))) (RULE instruccion_break (BLOCK (ALT BREAK) (ALT BREAK expressions))) (RULE instruccion_continue (BLOCK (ALT CONTINUE))) (RULE instruccion_return (returns interfaces.Instruction instr) (BLOCK (ALT RETURN expressions { $instr = instruction.NewReturn($expressions.p, $RETURN.line, localctx.(*Instruccion_returnContext).Get_RETURN().GetColumn()) }))) (RULE instruccion_func (returns interfaces.Instruction instr) (BLOCK (ALT FUNC ID TK_PARA TK_PARC TK_LLAVEA instrucciones TK_LLAVEC { $instr = instruction.NewFunction($ID.text, nil, $instrucciones.l, interfaces.NULL,      $FUNC.line, localctx.(*Instruccion_funcContext).Get_FUNC().GetColumn()) }) (ALT FUNC ID TK_PARA TK_PARC TK_MENOSMAYOR instruccion_tipo TK_LLAVEA instrucciones TK_LLAVEC { $instr = instruction.NewFunction($ID.text, nil, $instrucciones.l, $instruccion_tipo.tipo_exp, $FUNC.line, localctx.(*Instruccion_funcContext).Get_FUNC().GetColumn()) }) (ALT FUNC ID TK_PARA list_function_parameters TK_PARC TK_LLAVEA instrucciones TK_LLAVEC { $instr = instruction.NewFunction($ID.text, $list_function_parameters.l, $instrucciones.l, interfaces.NULL,      $FUNC.line, localctx.(*Instruccion_funcContext).Get_FUNC().GetColumn()) }) (ALT FUNC ID TK_PARA list_function_parameters TK_PARC TK_MENOSMAYOR instruccion_tipo TK_LLAVEA instrucciones TK_LLAVEC { $instr = instruction.NewFunction($ID.text, $list_function_parameters.l, $instrucciones.l, $instruccion_tipo.tipo_exp, $FUNC.line, localctx.(*Instruccion_funcContext).Get_FUNC().GetColumn()) }))) (RULE list_function_parameters (returns *arrayList.List l) (@ init {
    $l =  arrayList.New()
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= e block_parameters_fn)))) {
        listInt := localctx.(*List_function_parametersContext).GetE()
        for _, e := range listInt {
            $l.Add(e.GetInstr())
        }
    }))) (RULE block_parameters_fn (returns interfaces.Instruction instr) (BLOCK (ALT ID TK_DOSPUNTOS instruccion_tipo TK_COMA { $instr = instruction.NewListExprefunc($ID.text, $instruccion_tipo.tipo_exp, $ID.line, localctx.(*Block_parameters_fnContext).Get_ID().GetColumn()) }) (ALT ID TK_DOSPUNTOS instruccion_tipo { $instr = instruction.NewListExprefunc($ID.text, $instruccion_tipo.tipo_exp, $ID.line, localctx.(*Block_parameters_fnContext).Get_ID().GetColumn()) }))) (RULE instruccion_llamada (BLOCK (ALT ID TK_PARA TK_PARC) (ALT ID TK_PARA list_expression TK_PARC))) (RULE instr_llamada_expre (BLOCK (ALT ID TK_PARA TK_PARC) (ALT ID TK_PARA list_expression TK_PARC))) (RULE instruccion_structs_declaracion (BLOCK (ALT STRUCT ID TK_LLAVEA list_struct_parameters TK_LLAVEC))) (RULE list_struct_parameters (BLOCK (ALT (+ (BLOCK (ALT (+= e block_structs_parameters))))))) (RULE block_structs_parameters (BLOCK (ALT ID TK_DOSPUNTOS instruccion_tipo TK_COMA) (ALT ID TK_DOSPUNTOS instruccion_tipo))) (RULE instr_arrays_identifier (BLOCK (ALT ID list_arrays_parameters_id))) (RULE list_arrays_parameters_id (BLOCK (ALT (+ (BLOCK (ALT (+= e block_arrays_identifier))))))) (RULE block_arrays_identifier (BLOCK (ALT TK_CORA expressions TK_CORC))) (RULE instr_structs_declaration (BLOCK (ALT VAR (= left ID) TK_IGUAL (= right ID) TK_LLAVEA list_struct_parameters_decla TK_LLAVEC) (ALT LET (= left ID) TK_IGUAL (= right ID) TK_LLAVEA list_struct_parameters_decla TK_LLAVEC))) (RULE list_struct_parameters_decla (BLOCK (ALT (+ (BLOCK (ALT (+= e block_structs_parameters_decla))))))) (RULE block_structs_parameters_decla (BLOCK (ALT ID TK_DOSPUNTOS expressions) (ALT ID TK_DOSPUNTOS expressions TK_COMA))) (RULE instr_structs_identifier (BLOCK (ALT ID list_struct_parameters_id))) (RULE list_struct_parameters_id (BLOCK (ALT (+ (BLOCK (ALT (+= e block_structs_identifier))))))) (RULE block_structs_identifier (BLOCK (ALT TK_PUNTO ID))) (RULE instr_structs_assignment (BLOCK (ALT ID list_struct_parameters_id TK_IGUAL expressions))) (RULE instruccion_tipo (returns interfaces.TypeExpression tipo_exp) (BLOCK (ALT R_INT {$tipo_exp = interfaces.INTEGER}) (ALT R_FLOAT {$tipo_exp = interfaces.FLOAT}) (ALT R_STRING {$tipo_exp = interfaces.STRING}) (ALT R_BOOL {$tipo_exp = interfaces.BOOLEAN}) (ALT R_CHAR {$tipo_exp = interfaces.CHAR}))) (RULE list_expression (returns *arrayList.List l) (@ init {
    $l =  arrayList.New()
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= e block_list_expression)))) {
        listInt := localctx.(*List_expressionContext).GetE()
        for _, e := range listInt {
            $l.Add(e.GetP())
        }
    }))) (RULE block_list_expression (returns interfaces.Expression p) (BLOCK (ALT expressions TK_COMA { $p =  instruction.NewListExpre($expressions.p) }) (ALT expressions { $p =  instruction.NewListExpre($expressions.p) }))) (RULE expressions (returns interfaces.Expression p) (BLOCK (ALT expre_log { $p = $expre_log.p }) (ALT expre_arit { $p = $expre_arit.p }) (ALT expre_rel { $p = $expre_rel.p }))) (RULE expre_log (returns interfaces.Expression p) (BLOCK (ALT (= op '!') (= left expre_log) { $p = expression.NewOperacion($left.p, $op.text, nil,      true,  $op.line, localctx.(*Expre_logContext).GetOp().GetColumn()) }) (ALT (= left expre_log) (= op (SET '&&' '||')) (= right expre_log) { $p = expression.NewOperacion($left.p, $op.text, $right.p, false, $op.line, localctx.(*Expre_logContext).GetOp().GetColumn()) }) (ALT expre_rel { $p = $expre_rel.p }))) (RULE expre_rel (returns interfaces.Expression p) (BLOCK (ALT (= left expre_rel) (= op (SET '<' '<=' '>=' '>' '!=' '==')) (= right expre_rel) { $p = expression.NewOperacion($left.p, $op.text, $right.p, false, $op.line, localctx.(*Expre_relContext).GetOp().GetColumn()) }) (ALT expre_arit { $p = $expre_arit.p }))) (RULE expre_arit (returns interfaces.Expression p) (BLOCK (ALT (= op '-') (= left expre_arit) { $p = expression.NewOperacion($left.p, $op.text, nil,      true,  $op.line, localctx.(*Expre_aritContext).GetOp().GetColumn()) }) (ALT (= left expre_arit) (= op (SET '*' '/' '%')) (= right expre_arit) { $p = expression.NewOperacion($left.p, $op.text, $right.p, false, $op.line, localctx.(*Expre_aritContext).GetOp().GetColumn()) }) (ALT (= left expre_arit) (= op (SET '+' '-')) (= right expre_arit) { $p = expression.NewOperacion($left.p, $op.text, $right.p, false, $op.line, localctx.(*Expre_aritContext).GetOp().GetColumn()) }) (ALT expre_valor { $p = $expre_valor.p }) (ALT TK_PARA expressions TK_PARC { $p = $expressions.p }))) (RULE expre_valor (returns interfaces.Expression p) (BLOCK (ALT primitivo { $p = $primitivo.p }))) (RULE primitivo (returns interfaces.Expression p) (BLOCK (ALT NUMBER {
              num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }

            $p = expression.NewPrimitivo(num, interfaces.INTEGER, interfaces.NULL, $NUMBER.line, localctx.(*PrimitivoContext).Get_NUMBER().GetColumn())
       }) (ALT DOUBLE {  
                num,err := strconv.ParseFloat($DOUBLE.text, 64)
                if err!= nil{
                    fmt.Println(err)
                }
            $p = expression.NewPrimitivo(num, interfaces.FLOAT, interfaces.NULL, $DOUBLE.line, localctx.(*PrimitivoContext).Get_DOUBLE().GetColumn())
              }) (ALT STRING { 
              str:= $STRING.text[1:len($STRING.text)-1]
              $p = expression.NewPrimitivo(str, interfaces.STRING, interfaces.NULL, $STRING.line, localctx.(*PrimitivoContext).Get_STRING().GetColumn())
            
            }) (ALT BOOLEAN { 
          
              exp,_ := strconv.ParseBool($BOOLEAN.text)
              $p = expression.NewPrimitivo(exp, interfaces.BOOLEAN, interfaces.NULL, $BOOLEAN.line, localctx.(*PrimitivoContext).Get_BOOLEAN().GetColumn())
            }) (ALT CHAR {

            str:= $CHAR.text[1]
            $p = expression.NewPrimitivo(string(str), interfaces.CHAR, interfaces.NULL, $CHAR.line, localctx.(*PrimitivoContext).Get_CHAR().GetColumn())
          
          }) (ALT instr_llamada_expre) (ALT instr_structs_identifier) (ALT instr_arrays_identifier) (ALT ID { $p = instruction.NewIdentifier($ID.text, $ID.line, localctx.(*PrimitivoContext).Get_ID().GetColumn()) }) (ALT instruccion_ternario { $p = $instruccion_ternario.p }) (ALT instruccion_switch_ternario) (ALT instruccion_while_true_ternario { $p = $instruccion_while_true_ternario.p })))))
2023-11-01 18:05:37:787 left-recursion LogManager.java:25 expre_log returns [interfaces.Expression p]
    :   ( {} op='!'<tokenIndex=1382> left=expre_log<tokenIndex=1386,p=3>                                                { $p = expression.NewOperacion($left.p, $op.text, nil,      true,  $op.line, localctx.(*Expre_logContext).GetOp().GetColumn()) } 
        | expre_rel<tokenIndex=1410>                                                           { $p = $expre_rel.p } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> op=('&&'<tokenIndex=1398>|'||'<tokenIndex=1400>) right=expre_log<tokenIndex=1405,p=3>                       { $p = expression.NewOperacion($left.p, $op.text, $right.p, false, $op.line, localctx.(*Expre_logContext).GetOp().GetColumn()) }
        )*
    ;
2023-11-01 18:05:37:833 grammar LogManager.java:25 added: (RULE expre_log (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (= op ('!' (ELEMENT_OPTIONS (= tokenIndex 1382)))) (= left (expre_log (ELEMENT_OPTIONS (= tokenIndex 1386) (= p 3)))) { $p = expression.NewOperacion($left.p, $op.text, nil,      true,  $op.line, localctx.(*Expre_logContext).GetOp().GetColumn()) }) (ALT (expre_rel (ELEMENT_OPTIONS (= tokenIndex 1410))) { $p = $expre_rel.p })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (= op (SET ('&&' (ELEMENT_OPTIONS (= tokenIndex 1398))) ('||' (ELEMENT_OPTIONS (= tokenIndex 1400))))) (= right (expre_log (ELEMENT_OPTIONS (= tokenIndex 1405) (= p 3)))) { $p = expression.NewOperacion($left.p, $op.text, $right.p, false, $op.line, localctx.(*Expre_logContext).GetOp().GetColumn()) }))))))
2023-11-01 18:05:37:835 left-recursion LogManager.java:25 expre_rel returns [interfaces.Expression p]
    :   ( {} expre_arit<tokenIndex=1451>                                                          { $p = $expre_arit.p } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> op=('<'<tokenIndex=1430>|'<='<tokenIndex=1432>|'>='<tokenIndex=1434>|'>'<tokenIndex=1436>|'!='<tokenIndex=1438>|'=='<tokenIndex=1440>) right=expre_rel<tokenIndex=1445,p=3>       { $p = expression.NewOperacion($left.p, $op.text, $right.p, false, $op.line, localctx.(*Expre_relContext).GetOp().GetColumn()) }
        )*
    ;
2023-11-01 18:05:37:866 grammar LogManager.java:25 added: (RULE expre_rel (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (expre_arit (ELEMENT_OPTIONS (= tokenIndex 1451))) { $p = $expre_arit.p })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (= op (SET ('<' (ELEMENT_OPTIONS (= tokenIndex 1430))) ('<=' (ELEMENT_OPTIONS (= tokenIndex 1432))) ('>=' (ELEMENT_OPTIONS (= tokenIndex 1434))) ('>' (ELEMENT_OPTIONS (= tokenIndex 1436))) ('!=' (ELEMENT_OPTIONS (= tokenIndex 1438))) ('==' (ELEMENT_OPTIONS (= tokenIndex 1440))))) (= right (expre_rel (ELEMENT_OPTIONS (= tokenIndex 1445) (= p 3)))) { $p = expression.NewOperacion($left.p, $op.text, $right.p, false, $op.line, localctx.(*Expre_relContext).GetOp().GetColumn()) }))))))
2023-11-01 18:05:37:902 left-recursion LogManager.java:25 expre_arit returns [interfaces.Expression p]
    :   ( {} op='-'<tokenIndex=1466> left=expre_arit<tokenIndex=1470,p=5>                                    { $p = expression.NewOperacion($left.p, $op.text, nil,      true,  $op.line, localctx.(*Expre_aritContext).GetOp().GetColumn()) } 
        | expre_valor<tokenIndex=1518>                                             { $p = $expre_valor.p } 
        | TK_PARA<tokenIndex=1524> expressions<tokenIndex=1526> TK_PARC<tokenIndex=1528>                             { $p = $expressions.p } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 4)}?<p=4> op=('*'<tokenIndex=1483>|'/'<tokenIndex=1485>|'%'<tokenIndex=1487>) right=expre_arit<tokenIndex=1492,p=5>       { $p = expression.NewOperacion($left.p, $op.text, $right.p, false, $op.line, localctx.(*Expre_aritContext).GetOp().GetColumn()) }
                  | {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> op=('+'<tokenIndex=1505>|'-'<tokenIndex=1507>) right=expre_arit<tokenIndex=1512,p=4>           { $p = expression.NewOperacion($left.p, $op.text, $right.p, false, $op.line, localctx.(*Expre_aritContext).GetOp().GetColumn()) }
        )*
    ;
2023-11-01 18:05:37:947 grammar LogManager.java:25 added: (RULE expre_arit (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (= op ('-' (ELEMENT_OPTIONS (= tokenIndex 1466)))) (= left (expre_arit (ELEMENT_OPTIONS (= tokenIndex 1470) (= p 5)))) { $p = expression.NewOperacion($left.p, $op.text, nil,      true,  $op.line, localctx.(*Expre_aritContext).GetOp().GetColumn()) }) (ALT (expre_valor (ELEMENT_OPTIONS (= tokenIndex 1518))) { $p = $expre_valor.p }) (ALT (TK_PARA (ELEMENT_OPTIONS (= tokenIndex 1524))) (expressions (ELEMENT_OPTIONS (= tokenIndex 1526))) (TK_PARC (ELEMENT_OPTIONS (= tokenIndex 1528))) { $p = $expressions.p })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 4)}? (ELEMENT_OPTIONS (= p 4))) (= op (SET ('*' (ELEMENT_OPTIONS (= tokenIndex 1483))) ('/' (ELEMENT_OPTIONS (= tokenIndex 1485))) ('%' (ELEMENT_OPTIONS (= tokenIndex 1487))))) (= right (expre_arit (ELEMENT_OPTIONS (= tokenIndex 1492) (= p 5)))) { $p = expression.NewOperacion($left.p, $op.text, $right.p, false, $op.line, localctx.(*Expre_aritContext).GetOp().GetColumn()) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (= op (SET ('+' (ELEMENT_OPTIONS (= tokenIndex 1505))) ('-' (ELEMENT_OPTIONS (= tokenIndex 1507))))) (= right (expre_arit (ELEMENT_OPTIONS (= tokenIndex 1512) (= p 4)))) { $p = expression.NewOperacion($left.p, $op.text, $right.p, false, $op.line, localctx.(*Expre_aritContext).GetOp().GetColumn()) }))))))
2023-11-01 18:05:38:284 grammar LogManager.java:25 import PRINT=1
2023-11-01 18:05:38:284 grammar LogManager.java:25 import VAR=2
2023-11-01 18:05:38:285 grammar LogManager.java:25 import LET=3
2023-11-01 18:05:38:285 grammar LogManager.java:25 import IF=4
2023-11-01 18:05:38:285 grammar LogManager.java:25 import ELSE=5
2023-11-01 18:05:38:285 grammar LogManager.java:25 import FOR=6
2023-11-01 18:05:38:285 grammar LogManager.java:25 import WHILE=7
2023-11-01 18:05:38:285 grammar LogManager.java:25 import SWITCH=8
2023-11-01 18:05:38:285 grammar LogManager.java:25 import CASE=9
2023-11-01 18:05:38:285 grammar LogManager.java:25 import DEFAULT=10
2023-11-01 18:05:38:285 grammar LogManager.java:25 import IN=11
2023-11-01 18:05:38:285 grammar LogManager.java:25 import BREAK=12
2023-11-01 18:05:38:286 grammar LogManager.java:25 import CONTINUE=13
2023-11-01 18:05:38:286 grammar LogManager.java:25 import RETURN=14
2023-11-01 18:05:38:286 grammar LogManager.java:25 import FUNC=15
2023-11-01 18:05:38:286 grammar LogManager.java:25 import STRUCT=16
2023-11-01 18:05:38:286 grammar LogManager.java:25 import R_INT=17
2023-11-01 18:05:38:286 grammar LogManager.java:25 import R_FLOAT=18
2023-11-01 18:05:38:287 grammar LogManager.java:25 import R_DOUBLE=19
2023-11-01 18:05:38:287 grammar LogManager.java:25 import R_BOOL=20
2023-11-01 18:05:38:288 grammar LogManager.java:25 import R_CHAR=21
2023-11-01 18:05:38:288 grammar LogManager.java:25 import R_STRING=22
2023-11-01 18:05:38:288 grammar LogManager.java:25 import TRUE=23
2023-11-01 18:05:38:288 grammar LogManager.java:25 import NUMBER=24
2023-11-01 18:05:38:295 grammar LogManager.java:25 import DOUBLE=25
2023-11-01 18:05:38:296 grammar LogManager.java:25 import CHAR=26
2023-11-01 18:05:38:296 grammar LogManager.java:25 import STRING=27
2023-11-01 18:05:38:297 grammar LogManager.java:25 import BOOLEAN=28
2023-11-01 18:05:38:297 grammar LogManager.java:25 import ID=29
2023-11-01 18:05:38:297 grammar LogManager.java:25 import TK_TRIPLEPUNTO=30
2023-11-01 18:05:38:297 grammar LogManager.java:25 import TK_PUNTO=31
2023-11-01 18:05:38:298 grammar LogManager.java:25 import TK_PUNTOCOMA=32
2023-11-01 18:05:38:298 grammar LogManager.java:25 import TK_COMA=33
2023-11-01 18:05:38:298 grammar LogManager.java:25 import TK_DOSPUNTOS=34
2023-11-01 18:05:38:298 grammar LogManager.java:25 import TK_IGUAL=35
2023-11-01 18:05:38:300 grammar LogManager.java:25 import TK_IGUALIGUAL=36
2023-11-01 18:05:38:300 grammar LogManager.java:25 import TK_MAYORIGUAL=37
2023-11-01 18:05:38:300 grammar LogManager.java:25 import TK_IGUALMAYOR=38
2023-11-01 18:05:38:302 grammar LogManager.java:25 import TK_MENOSMAYOR=39
2023-11-01 18:05:38:304 grammar LogManager.java:25 import TK_MENORIGUAL=40
2023-11-01 18:05:38:304 grammar LogManager.java:25 import TK_DIFIGUAL=41
2023-11-01 18:05:38:304 grammar LogManager.java:25 import TK_MAYOR=42
2023-11-01 18:05:38:304 grammar LogManager.java:25 import TK_MENOR=43
2023-11-01 18:05:38:304 grammar LogManager.java:25 import TK_MULT=44
2023-11-01 18:05:38:304 grammar LogManager.java:25 import TK_DIV=45
2023-11-01 18:05:38:304 grammar LogManager.java:25 import TK_MODULO=46
2023-11-01 18:05:38:304 grammar LogManager.java:25 import TK_MAS=47
2023-11-01 18:05:38:304 grammar LogManager.java:25 import TK_MENOS=48
2023-11-01 18:05:38:304 grammar LogManager.java:25 import TK_PARA=49
2023-11-01 18:05:38:304 grammar LogManager.java:25 import TK_PARC=50
2023-11-01 18:05:38:305 grammar LogManager.java:25 import TK_LLAVEA=51
2023-11-01 18:05:38:305 grammar LogManager.java:25 import TK_LLAVEC=52
2023-11-01 18:05:38:305 grammar LogManager.java:25 import TK_CORA=53
2023-11-01 18:05:38:305 grammar LogManager.java:25 import TK_CORC=54
2023-11-01 18:05:38:305 grammar LogManager.java:25 import TK_AND=55
2023-11-01 18:05:38:305 grammar LogManager.java:25 import TK_AMPERSAND=56
2023-11-01 18:05:38:305 grammar LogManager.java:25 import TK_OR=57
2023-11-01 18:05:38:305 grammar LogManager.java:25 import TK_BARRA=58
2023-11-01 18:05:38:305 grammar LogManager.java:25 import TK_NOT=59
2023-11-01 18:05:38:305 grammar LogManager.java:25 import WHITESPACE=60
2023-11-01 18:05:38:305 grammar LogManager.java:25 import TK_MULTI=61
2023-11-01 18:05:38:305 grammar LogManager.java:25 import TK_LINE=62
2023-11-01 18:05:38:305 grammar LogManager.java:25 import 'print'=1
2023-11-01 18:05:38:305 grammar LogManager.java:25 import 'var'=2
2023-11-01 18:05:38:305 grammar LogManager.java:25 import 'let'=3
2023-11-01 18:05:38:305 grammar LogManager.java:25 import 'if'=4
2023-11-01 18:05:38:305 grammar LogManager.java:25 import 'else'=5
2023-11-01 18:05:38:305 grammar LogManager.java:25 import 'for'=6
2023-11-01 18:05:38:305 grammar LogManager.java:25 import 'while'=7
2023-11-01 18:05:38:305 grammar LogManager.java:25 import 'switch'=8
2023-11-01 18:05:38:309 grammar LogManager.java:25 import 'case'=9
2023-11-01 18:05:38:310 grammar LogManager.java:25 import 'default'=10
2023-11-01 18:05:38:311 grammar LogManager.java:25 import 'in'=11
2023-11-01 18:05:38:311 grammar LogManager.java:25 import 'break'=12
2023-11-01 18:05:38:311 grammar LogManager.java:25 import 'continue'=13
2023-11-01 18:05:38:311 grammar LogManager.java:25 import 'return'=14
2023-11-01 18:05:38:311 grammar LogManager.java:25 import 'func'=15
2023-11-01 18:05:38:312 grammar LogManager.java:25 import 'struct'=16
2023-11-01 18:05:38:312 grammar LogManager.java:25 import 'Int'=17
2023-11-01 18:05:38:312 grammar LogManager.java:25 import 'Float'=18
2023-11-01 18:05:38:314 grammar LogManager.java:25 import 'Double'=19
2023-11-01 18:05:38:314 grammar LogManager.java:25 import 'Bool'=20
2023-11-01 18:05:38:314 grammar LogManager.java:25 import 'Character'=21
2023-11-01 18:05:38:314 grammar LogManager.java:25 import 'String'=22
2023-11-01 18:05:38:315 grammar LogManager.java:25 import 'true'=23
2023-11-01 18:05:38:315 grammar LogManager.java:25 import '...'=30
2023-11-01 18:05:38:315 grammar LogManager.java:25 import '.'=31
2023-11-01 18:05:38:315 grammar LogManager.java:25 import ';'=32
2023-11-01 18:05:38:315 grammar LogManager.java:25 import ','=33
2023-11-01 18:05:38:315 grammar LogManager.java:25 import ':'=34
2023-11-01 18:05:38:315 grammar LogManager.java:25 import '='=35
2023-11-01 18:05:38:315 grammar LogManager.java:25 import '=='=36
2023-11-01 18:05:38:315 grammar LogManager.java:25 import '>='=37
2023-11-01 18:05:38:315 grammar LogManager.java:25 import '=>'=38
2023-11-01 18:05:38:315 grammar LogManager.java:25 import '->'=39
2023-11-01 18:05:38:316 grammar LogManager.java:25 import '<='=40
2023-11-01 18:05:38:316 grammar LogManager.java:25 import '!='=41
2023-11-01 18:05:38:316 grammar LogManager.java:25 import '>'=42
2023-11-01 18:05:38:316 grammar LogManager.java:25 import '<'=43
2023-11-01 18:05:38:316 grammar LogManager.java:25 import '*'=44
2023-11-01 18:05:38:316 grammar LogManager.java:25 import '/'=45
2023-11-01 18:05:38:316 grammar LogManager.java:25 import '%'=46
2023-11-01 18:05:38:316 grammar LogManager.java:25 import '+'=47
2023-11-01 18:05:38:316 grammar LogManager.java:25 import '-'=48
2023-11-01 18:05:38:318 grammar LogManager.java:25 import '('=49
2023-11-01 18:05:38:318 grammar LogManager.java:25 import ')'=50
2023-11-01 18:05:38:318 grammar LogManager.java:25 import '{'=51
2023-11-01 18:05:38:318 grammar LogManager.java:25 import '}'=52
2023-11-01 18:05:38:318 grammar LogManager.java:25 import '['=53
2023-11-01 18:05:38:318 grammar LogManager.java:25 import ']'=54
2023-11-01 18:05:38:318 grammar LogManager.java:25 import '&&'=55
2023-11-01 18:05:38:318 grammar LogManager.java:25 import '&'=56
2023-11-01 18:05:38:318 grammar LogManager.java:25 import '||'=57
2023-11-01 18:05:38:318 grammar LogManager.java:25 import '|'=58
2023-11-01 18:05:38:318 grammar LogManager.java:25 import '!'=59
2023-11-01 18:05:38:319 grammar LogManager.java:25 tokens={PRINT=1, VAR=2, LET=3, IF=4, ELSE=5, FOR=6, WHILE=7, SWITCH=8, CASE=9, DEFAULT=10, IN=11, BREAK=12, CONTINUE=13, RETURN=14, FUNC=15, STRUCT=16, R_INT=17, R_FLOAT=18, R_DOUBLE=19, R_BOOL=20, R_CHAR=21, R_STRING=22, TRUE=23, NUMBER=24, DOUBLE=25, CHAR=26, STRING=27, BOOLEAN=28, ID=29, TK_TRIPLEPUNTO=30, TK_PUNTO=31, TK_PUNTOCOMA=32, TK_COMA=33, TK_DOSPUNTOS=34, TK_IGUAL=35, TK_IGUALIGUAL=36, TK_MAYORIGUAL=37, TK_IGUALMAYOR=38, TK_MENOSMAYOR=39, TK_MENORIGUAL=40, TK_DIFIGUAL=41, TK_MAYOR=42, TK_MENOR=43, TK_MULT=44, TK_DIV=45, TK_MODULO=46, TK_MAS=47, TK_MENOS=48, TK_PARA=49, TK_PARC=50, TK_LLAVEA=51, TK_LLAVEC=52, TK_CORA=53, TK_CORC=54, TK_AND=55, TK_AMPERSAND=56, TK_OR=57, TK_BARRA=58, TK_NOT=59, WHITESPACE=60, TK_MULTI=61, TK_LINE=62, 'print'=1, 'var'=2, 'let'=3, 'if'=4, 'else'=5, 'for'=6, 'while'=7, 'switch'=8, 'case'=9, 'default'=10, 'in'=11, 'break'=12, 'continue'=13, 'return'=14, 'func'=15, 'struct'=16, 'Int'=17, 'Float'=18, 'Double'=19, 'Bool'=20, 'Character'=21, 'String'=22, 'true'=23, '...'=30, '.'=31, ';'=32, ','=33, ':'=34, '='=35, '=='=36, '>='=37, '=>'=38, '->'=39, '<='=40, '!='=41, '>'=42, '<'=43, '*'=44, '/'=45, '%'=46, '+'=47, '-'=48, '('=49, ')'=50, '{'=51, '}'=52, '['=53, ']'=54, '&&'=55, '&'=56, '||'=57, '|'=58, '!'=59}
2023-11-01 18:05:38:336 semantics LogManager.java:25 tokens={EOF=-1, PRINT=1, VAR=2, LET=3, IF=4, ELSE=5, FOR=6, WHILE=7, SWITCH=8, CASE=9, DEFAULT=10, IN=11, BREAK=12, CONTINUE=13, RETURN=14, FUNC=15, STRUCT=16, R_INT=17, R_FLOAT=18, R_DOUBLE=19, R_BOOL=20, R_CHAR=21, R_STRING=22, TRUE=23, NUMBER=24, DOUBLE=25, CHAR=26, STRING=27, BOOLEAN=28, ID=29, TK_TRIPLEPUNTO=30, TK_PUNTO=31, TK_PUNTOCOMA=32, TK_COMA=33, TK_DOSPUNTOS=34, TK_IGUAL=35, TK_IGUALIGUAL=36, TK_MAYORIGUAL=37, TK_IGUALMAYOR=38, TK_MENOSMAYOR=39, TK_MENORIGUAL=40, TK_DIFIGUAL=41, TK_MAYOR=42, TK_MENOR=43, TK_MULT=44, TK_DIV=45, TK_MODULO=46, TK_MAS=47, TK_MENOS=48, TK_PARA=49, TK_PARC=50, TK_LLAVEA=51, TK_LLAVEC=52, TK_CORA=53, TK_CORC=54, TK_AND=55, TK_AMPERSAND=56, TK_OR=57, TK_BARRA=58, TK_NOT=59, WHITESPACE=60, TK_MULTI=61, TK_LINE=62}
2023-11-01 18:05:38:336 semantics LogManager.java:25 strings={'print'=1, 'var'=2, 'let'=3, 'if'=4, 'else'=5, 'for'=6, 'while'=7, 'switch'=8, 'case'=9, 'default'=10, 'in'=11, 'break'=12, 'continue'=13, 'return'=14, 'func'=15, 'struct'=16, 'Int'=17, 'Float'=18, 'Double'=19, 'Bool'=20, 'Character'=21, 'String'=22, 'true'=23, '...'=30, '.'=31, ';'=32, ','=33, ':'=34, '='=35, '=='=36, '>='=37, '=>'=38, '->'=39, '<='=40, '!='=41, '>'=42, '<'=43, '*'=44, '/'=45, '%'=46, '+'=47, '-'=48, '('=49, ')'=50, '{'=51, '}'=52, '['=53, ']'=54, '&&'=55, '&'=56, '||'=57, '|'=58, '!'=59}
2023-11-01 18:05:39:062 LL1 LogManager.java:25 
DECISION 0 in rule instrucciones
2023-11-01 18:05:39:214 LL1 LogManager.java:25 look=[{1..4, 6..8, 12..16, 29}, {<EOF>, 52}]
2023-11-01 18:05:39:215 LL1 LogManager.java:25 LL(1)? true
2023-11-01 18:05:39:215 LL1 LogManager.java:25 
DECISION 1 in rule instruccion
2023-11-01 18:05:39:215 LL1 LogManager.java:25 look=[1, 16, {2..3}, 29, 29, 4, 6, 7, 7, 8, 12, 13, 15, 29, 14, {2..3}]
2023-11-01 18:05:39:215 LL1 LogManager.java:25 LL(1)? false
2023-11-01 18:05:39:215 LL1 LogManager.java:25 
DECISION 2 in rule instruccion_println
2023-11-01 18:05:39:215 LL1 LogManager.java:25 look=[1, 1, 1]
2023-11-01 18:05:39:215 LL1 LogManager.java:25 LL(1)? false
2023-11-01 18:05:39:215 LL1 LogManager.java:25 
DECISION 3 in rule instruccion_declaracion
2023-11-01 18:05:39:215 LL1 LogManager.java:25 look=[2, 2, 2, 3, 3, 3]
2023-11-01 18:05:39:215 LL1 LogManager.java:25 LL(1)? false
2023-11-01 18:05:39:215 LL1 LogManager.java:25 
DECISION 4 in rule instruccion_if
2023-11-01 18:05:39:215 LL1 LogManager.java:25 look=[4, 4, 4]
2023-11-01 18:05:39:215 LL1 LogManager.java:25 LL(1)? false
2023-11-01 18:05:39:215 LL1 LogManager.java:25 
DECISION 5 in rule instr_else_if
2023-11-01 18:05:39:217 LL1 LogManager.java:25 look=[4, {<EOF>, 1..4, 6..9, 12..16, 29, 33, 52}]
2023-11-01 18:05:39:217 LL1 LogManager.java:25 LL(1)? false
2023-11-01 18:05:39:217 LL1 LogManager.java:25 
DECISION 6 in rule instruccion_ternario
2023-11-01 18:05:39:217 LL1 LogManager.java:25 look=[4, 4, 4]
2023-11-01 18:05:39:217 LL1 LogManager.java:25 LL(1)? false
2023-11-01 18:05:39:217 LL1 LogManager.java:25 
DECISION 7 in rule instr_else_if_ternario
2023-11-01 18:05:39:222 LL1 LogManager.java:25 look=[4, null]
2023-11-01 18:05:39:222 LL1 LogManager.java:25 LL(1)? false
2023-11-01 18:05:39:222 LL1 LogManager.java:25 
DECISION 8 in rule instruccion_switch
2023-11-01 18:05:39:222 LL1 LogManager.java:25 look=[8, 8]
2023-11-01 18:05:39:222 LL1 LogManager.java:25 LL(1)? false
2023-11-01 18:05:39:222 LL1 LogManager.java:25 
DECISION 9 in rule list_case
2023-11-01 18:05:39:231 LL1 LogManager.java:25 look=[{4, 7..8, 24..29, 48..49, 59}, 9]
2023-11-01 18:05:39:231 LL1 LogManager.java:25 LL(1)? true
2023-11-01 18:05:39:231 LL1 LogManager.java:25 
DECISION 10 in rule instruccion_case
2023-11-01 18:05:39:234 LL1 LogManager.java:25 look=[{4, 7..8, 24..29, 48..49, 59}, {4, 7..8, 24..29, 48..49, 59}]
2023-11-01 18:05:39:234 LL1 LogManager.java:25 LL(1)? false
2023-11-01 18:05:39:234 LL1 LogManager.java:25 
DECISION 11 in rule list_expre_case
2023-11-01 18:05:39:234 LL1 LogManager.java:25 look=[{4, 7..8, 24..29, 48..49, 59}, 34]
2023-11-01 18:05:39:235 LL1 LogManager.java:25 LL(1)? true
2023-11-01 18:05:39:235 LL1 LogManager.java:25 
DECISION 12 in rule block_case
2023-11-01 18:05:39:235 LL1 LogManager.java:25 look=[{4, 7..8, 24..29, 48..49, 59}, {4, 7..8, 24..29, 48..49, 59}]
2023-11-01 18:05:39:235 LL1 LogManager.java:25 LL(1)? false
2023-11-01 18:05:39:235 LL1 LogManager.java:25 
DECISION 13 in rule instr_default
2023-11-01 18:05:39:235 LL1 LogManager.java:25 look=[9, 9]
2023-11-01 18:05:39:235 LL1 LogManager.java:25 LL(1)? false
2023-11-01 18:05:39:235 LL1 LogManager.java:25 
DECISION 14 in rule block_default
2023-11-01 18:05:39:235 LL1 LogManager.java:25 look=[9, 52]
2023-11-01 18:05:39:235 LL1 LogManager.java:25 LL(1)? true
2023-11-01 18:05:39:235 LL1 LogManager.java:25 
DECISION 15 in rule instruccion_switch_ternario
2023-11-01 18:05:39:235 LL1 LogManager.java:25 look=[8, 8]
2023-11-01 18:05:39:235 LL1 LogManager.java:25 LL(1)? false
2023-11-01 18:05:39:235 LL1 LogManager.java:25 
DECISION 16 in rule list_case_ternario
2023-11-01 18:05:39:237 LL1 LogManager.java:25 look=[{4, 7..8, 24..29, 48..49, 59}, 9]
2023-11-01 18:05:39:237 LL1 LogManager.java:25 LL(1)? true
2023-11-01 18:05:39:237 LL1 LogManager.java:25 
DECISION 17 in rule instr_case_ter
2023-11-01 18:05:39:244 LL1 LogManager.java:25 look=[{4, 7..8, 24..29, 48..49, 59}, {4, 7..8, 24..29, 48..49, 59}]
2023-11-01 18:05:39:245 LL1 LogManager.java:25 LL(1)? false
2023-11-01 18:05:39:245 LL1 LogManager.java:25 
DECISION 18 in rule list_expre_case_ter
2023-11-01 18:05:39:246 LL1 LogManager.java:25 look=[{4, 7..8, 24..29, 48..49, 59}, 34]
2023-11-01 18:05:39:247 LL1 LogManager.java:25 LL(1)? true
2023-11-01 18:05:39:247 LL1 LogManager.java:25 
DECISION 19 in rule block_case_ter
2023-11-01 18:05:39:247 LL1 LogManager.java:25 look=[{4, 7..8, 24..29, 48..49, 59}, {4, 7..8, 24..29, 48..49, 59}]
2023-11-01 18:05:39:247 LL1 LogManager.java:25 LL(1)? false
2023-11-01 18:05:39:247 LL1 LogManager.java:25 
DECISION 20 in rule instr_default_ter
2023-11-01 18:05:39:247 LL1 LogManager.java:25 look=[9, 9]
2023-11-01 18:05:39:247 LL1 LogManager.java:25 LL(1)? false
2023-11-01 18:05:39:247 LL1 LogManager.java:25 
DECISION 21 in rule instruccion_for_in
2023-11-01 18:05:39:247 LL1 LogManager.java:25 look=[6, 6]
2023-11-01 18:05:39:247 LL1 LogManager.java:25 LL(1)? false
2023-11-01 18:05:39:248 LL1 LogManager.java:25 
DECISION 22 in rule instruccion_break
2023-11-01 18:05:39:248 LL1 LogManager.java:25 look=[12, 12]
2023-11-01 18:05:39:248 LL1 LogManager.java:25 LL(1)? false
2023-11-01 18:05:39:248 LL1 LogManager.java:25 
DECISION 23 in rule instruccion_func
2023-11-01 18:05:39:248 LL1 LogManager.java:25 look=[15, 15, 15, 15]
2023-11-01 18:05:39:248 LL1 LogManager.java:25 LL(1)? false
2023-11-01 18:05:39:248 LL1 LogManager.java:25 
DECISION 24 in rule list_function_parameters
2023-11-01 18:05:39:248 LL1 LogManager.java:25 look=[29, 50]
2023-11-01 18:05:39:248 LL1 LogManager.java:25 LL(1)? true
2023-11-01 18:05:39:248 LL1 LogManager.java:25 
DECISION 25 in rule block_parameters_fn
2023-11-01 18:05:39:248 LL1 LogManager.java:25 look=[29, 29]
2023-11-01 18:05:39:248 LL1 LogManager.java:25 LL(1)? false
2023-11-01 18:05:39:248 LL1 LogManager.java:25 
DECISION 26 in rule instruccion_llamada
2023-11-01 18:05:39:248 LL1 LogManager.java:25 look=[29, 29]
2023-11-01 18:05:39:248 LL1 LogManager.java:25 LL(1)? false
2023-11-01 18:05:39:248 LL1 LogManager.java:25 
DECISION 27 in rule instr_llamada_expre
2023-11-01 18:05:39:248 LL1 LogManager.java:25 look=[29, 29]
2023-11-01 18:05:39:248 LL1 LogManager.java:25 LL(1)? false
2023-11-01 18:05:39:248 LL1 LogManager.java:25 
DECISION 28 in rule list_struct_parameters
2023-11-01 18:05:39:248 LL1 LogManager.java:25 look=[29, 52]
2023-11-01 18:05:39:248 LL1 LogManager.java:25 LL(1)? true
2023-11-01 18:05:39:249 LL1 LogManager.java:25 
DECISION 29 in rule block_structs_parameters
2023-11-01 18:05:39:249 LL1 LogManager.java:25 look=[29, 29]
2023-11-01 18:05:39:250 LL1 LogManager.java:25 LL(1)? false
2023-11-01 18:05:39:251 LL1 LogManager.java:25 
DECISION 30 in rule list_arrays_parameters_id
2023-11-01 18:05:39:267 LL1 LogManager.java:25 look=[53, null]
2023-11-01 18:05:39:267 LL1 LogManager.java:25 LL(1)? false
2023-11-01 18:05:39:267 LL1 LogManager.java:25 
DECISION 31 in rule instr_structs_declaration
2023-11-01 18:05:39:267 LL1 LogManager.java:25 look=[2, 3]
2023-11-01 18:05:39:267 LL1 LogManager.java:25 LL(1)? true
2023-11-01 18:05:39:267 LL1 LogManager.java:25 
DECISION 32 in rule list_struct_parameters_decla
2023-11-01 18:05:39:267 LL1 LogManager.java:25 look=[29, 52]
2023-11-01 18:05:39:267 LL1 LogManager.java:25 LL(1)? true
2023-11-01 18:05:39:267 LL1 LogManager.java:25 
DECISION 33 in rule block_structs_parameters_decla
2023-11-01 18:05:39:267 LL1 LogManager.java:25 look=[29, 29]
2023-11-01 18:05:39:267 LL1 LogManager.java:25 LL(1)? false
2023-11-01 18:05:39:267 LL1 LogManager.java:25 
DECISION 34 in rule list_struct_parameters_id
2023-11-01 18:05:39:280 LL1 LogManager.java:25 look=[31, null]
2023-11-01 18:05:39:280 LL1 LogManager.java:25 LL(1)? false
2023-11-01 18:05:39:280 LL1 LogManager.java:25 
DECISION 35 in rule instruccion_tipo
2023-11-01 18:05:39:280 LL1 LogManager.java:25 look=[17, 18, 22, 20, 21]
2023-11-01 18:05:39:280 LL1 LogManager.java:25 LL(1)? true
2023-11-01 18:05:39:280 LL1 LogManager.java:25 
DECISION 36 in rule list_expression
2023-11-01 18:05:39:281 LL1 LogManager.java:25 look=[{4, 7..8, 24..29, 48..49, 59}, 50]
2023-11-01 18:05:39:281 LL1 LogManager.java:25 LL(1)? true
2023-11-01 18:05:39:281 LL1 LogManager.java:25 
DECISION 37 in rule block_list_expression
2023-11-01 18:05:39:281 LL1 LogManager.java:25 look=[{4, 7..8, 24..29, 48..49, 59}, {4, 7..8, 24..29, 48..49, 59}]
2023-11-01 18:05:39:281 LL1 LogManager.java:25 LL(1)? false
2023-11-01 18:05:39:281 LL1 LogManager.java:25 
DECISION 38 in rule expressions
2023-11-01 18:05:39:282 LL1 LogManager.java:25 look=[{4, 7..8, 24..29, 48..49, 59}, {4, 7..8, 24..29, 48..49}, {4, 7..8, 24..29, 48..49}]
2023-11-01 18:05:39:282 LL1 LogManager.java:25 LL(1)? false
2023-11-01 18:05:39:282 LL1 LogManager.java:25 
DECISION 39 in rule expre_log
2023-11-01 18:05:39:282 LL1 LogManager.java:25 look=[59, {4, 7..8, 24..29, 48..49}]
2023-11-01 18:05:39:282 LL1 LogManager.java:25 LL(1)? true
2023-11-01 18:05:39:282 LL1 LogManager.java:25 
DECISION 40 in rule expre_log
2023-11-01 18:05:39:285 LL1 LogManager.java:25 look=[null, null]
2023-11-01 18:05:39:285 LL1 LogManager.java:25 LL(1)? false
2023-11-01 18:05:39:285 LL1 LogManager.java:25 
DECISION 41 in rule expre_rel
2023-11-01 18:05:39:287 LL1 LogManager.java:25 look=[null, null]
2023-11-01 18:05:39:287 LL1 LogManager.java:25 LL(1)? false
2023-11-01 18:05:39:287 LL1 LogManager.java:25 
DECISION 42 in rule expre_arit
2023-11-01 18:05:39:287 LL1 LogManager.java:25 look=[48, {4, 7..8, 24..29}, 49]
2023-11-01 18:05:39:287 LL1 LogManager.java:25 LL(1)? true
2023-11-01 18:05:39:315 LL1 LogManager.java:25 
DECISION 43 in rule expre_arit
2023-11-01 18:05:39:315 LL1 LogManager.java:25 look=[null, null]
2023-11-01 18:05:39:315 LL1 LogManager.java:25 LL(1)? false
2023-11-01 18:05:39:315 LL1 LogManager.java:25 
DECISION 44 in rule expre_arit
2023-11-01 18:05:39:335 LL1 LogManager.java:25 look=[null, null]
2023-11-01 18:05:39:335 LL1 LogManager.java:25 LL(1)? false
2023-11-01 18:05:39:335 LL1 LogManager.java:25 
DECISION 45 in rule primitivo
2023-11-01 18:05:39:335 LL1 LogManager.java:25 look=[24, 25, 27, 28, 26, 29, 29, 29, 29, 4, 8, 7]
2023-11-01 18:05:39:335 LL1 LogManager.java:25 LL(1)? false
2023-11-01 18:05:39:459 action-translator LogManager.java:25 translate 

import "OLC2/Compilador/interfaces"
import "OLC2/Compilador/instruccion"
import "OLC2/Compilador/expression"
import "OLC2/Compilador/instruccion/ternario"
import arrayList "github.com/colegno/arraylist"


2023-11-01 18:05:39:530 action-translator LogManager.java:25 translate $lista = $instrucciones.l
2023-11-01 18:05:39:530 action-translator LogManager.java:25 attr [@-1,1:5='lista',<0>,19:19]
2023-11-01 18:05:39:532 action-translator LogManager.java:25 qattr [@-1,10:22='instrucciones',<0>,19:28].[@-1,24:24='l',<0>,19:42]
2023-11-01 18:05:39:537 action-translator LogManager.java:25 translate 
    $l =  arrayList.New()
  
2023-11-01 18:05:39:537 action-translator LogManager.java:25 attr [@-1,7:7='l',<0>,24:5]
2023-11-01 18:05:39:547 action-translator LogManager.java:25 translate 
        listInt := localctx.(*InstruccionesContext).GetList()
        for _, e := range listInt {
            $l.Add(e.GetInstr())
        }
    
2023-11-01 18:05:39:548 action-translator LogManager.java:25 attr [@-1,115:115='l',<0>,29:13]
2023-11-01 18:05:39:551 action-translator LogManager.java:25 translate  $instr = $instruccion_println.instr               
2023-11-01 18:05:39:551 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,35:23]
2023-11-01 18:05:39:551 action-translator LogManager.java:25 qattr [@-1,11:29='instruccion_println',<0>,35:32].[@-1,31:35='instr',<0>,35:52]
2023-11-01 18:05:39:552 action-translator LogManager.java:25 translate  $instr = $instruccion_declaracion.instr           
2023-11-01 18:05:39:552 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,38:27]
2023-11-01 18:05:39:553 action-translator LogManager.java:25 qattr [@-1,11:33='instruccion_declaracion',<0>,38:36].[@-1,35:39='instr',<0>,38:60]
2023-11-01 18:05:39:554 action-translator LogManager.java:25 translate  $instr = $instruccion_asignacion.instr            
2023-11-01 18:05:39:554 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,39:25]
2023-11-01 18:05:39:554 action-translator LogManager.java:25 qattr [@-1,11:32='instruccion_asignacion',<0>,39:34].[@-1,34:38='instr',<0>,39:57]
2023-11-01 18:05:39:554 action-translator LogManager.java:25 translate  $instr = $instruccion_if.instr                    
2023-11-01 18:05:39:554 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,41:18]
2023-11-01 18:05:39:554 action-translator LogManager.java:25 qattr [@-1,11:24='instruccion_if',<0>,41:27].[@-1,26:30='instr',<0>,41:42]
2023-11-01 18:05:39:554 action-translator LogManager.java:25 translate  $instr = $instruccion_for_in.instr                
2023-11-01 18:05:39:554 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,42:22]
2023-11-01 18:05:39:554 action-translator LogManager.java:25 qattr [@-1,11:28='instruccion_for_in',<0>,42:31].[@-1,30:34='instr',<0>,42:50]
2023-11-01 18:05:39:554 action-translator LogManager.java:25 translate  $instr = $instruccion_while.instr                 
2023-11-01 18:05:39:554 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,43:21]
2023-11-01 18:05:39:559 action-translator LogManager.java:25 qattr [@-1,11:27='instruccion_while',<0>,43:30].[@-1,29:33='instr',<0>,43:48]
2023-11-01 18:05:39:563 action-translator LogManager.java:25 translate  $instr = $instruccion_while_true.instr                  
2023-11-01 18:05:39:563 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,44:26]
2023-11-01 18:05:39:565 action-translator LogManager.java:25 qattr [@-1,11:32='instruccion_while_true',<0>,44:35].[@-1,34:38='instr',<0>,44:58]
2023-11-01 18:05:39:566 action-translator LogManager.java:25 translate  $instr = $instruccion_func.instr                  
2023-11-01 18:05:39:566 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,48:20]
2023-11-01 18:05:39:566 action-translator LogManager.java:25 qattr [@-1,11:26='instruccion_func',<0>,48:29].[@-1,28:32='instr',<0>,48:46]
2023-11-01 18:05:39:572 action-translator LogManager.java:25 translate  $instr = instruction.NewPrintln(nil, $primitivo.p,       "-1",         $PRINT.line, localctx.(*Instruccion_printlnContext).Get_PRINT().GetColumn()) 
2023-11-01 18:05:39:572 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,59:35]
2023-11-01 18:05:39:572 action-translator LogManager.java:25 qattr [@-1,39:47='primitivo',<0>,59:72].[@-1,49:49='p',<0>,59:82]
2023-11-01 18:05:39:572 action-translator LogManager.java:25 qattr [@-1,73:77='PRINT',<0>,59:106].[@-1,79:82='line',<0>,59:112]
2023-11-01 18:05:39:579 action-translator LogManager.java:25 translate  $instr = instruction.NewPrintln($list_expression.l, nil,$STRING.text[1:len($STRING.text)-1], $PRINT.line, localctx.(*Instruccion_printlnContext).Get_PRINT().GetColumn()) 
2023-11-01 18:05:39:580 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,60:56]
2023-11-01 18:05:39:581 action-translator LogManager.java:25 qattr [@-1,34:48='list_expression',<0>,60:88].[@-1,50:50='l',<0>,60:104]
2023-11-01 18:05:39:581 action-translator LogManager.java:25 qattr [@-1,58:63='STRING',<0>,60:112].[@-1,65:68='text',<0>,60:119]
2023-11-01 18:05:39:590 action-translator LogManager.java:25 qattr [@-1,77:82='STRING',<0>,60:131].[@-1,84:87='text',<0>,60:138]
2023-11-01 18:05:39:600 action-translator LogManager.java:25 qattr [@-1,95:99='PRINT',<0>,60:149].[@-1,101:104='line',<0>,60:155]
2023-11-01 18:05:39:602 action-translator LogManager.java:25 translate  $instr = instruction.NewPrintln(nil, $expressions.p,       "-1",         $PRINT.line, localctx.(*Instruccion_printlnContext).Get_PRINT().GetColumn()) 
2023-11-01 18:05:39:602 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,61:37]
2023-11-01 18:05:39:602 action-translator LogManager.java:25 qattr [@-1,39:49='expressions',<0>,61:74].[@-1,51:51='p',<0>,61:86]
2023-11-01 18:05:39:602 action-translator LogManager.java:25 qattr [@-1,75:79='PRINT',<0>,61:110].[@-1,81:84='line',<0>,61:116]
2023-11-01 18:05:39:636 action-translator LogManager.java:25 translate  $instr = instruction.NewDeclaration($ID.text, interfaces.NULL,      $expressions.p, true,  $VAR.line, localctx.(*Instruccion_declaracionContext).Get_VAR().GetColumn()) 
2023-11-01 18:05:39:636 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,70:34]
2023-11-01 18:05:39:636 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,70:70].[@-1,41:44='text',<0>,70:73]
2023-11-01 18:05:39:640 action-translator LogManager.java:25 qattr [@-1,70:80='expressions',<0>,70:102].[@-1,82:82='p',<0>,70:114]
2023-11-01 18:05:39:642 action-translator LogManager.java:25 qattr [@-1,93:95='VAR',<0>,70:125].[@-1,97:100='line',<0>,70:129]
2023-11-01 18:05:39:646 action-translator LogManager.java:25 translate  $instr = instruction.NewDeclaration($ID.text, $instruccion_tipo.tipo_exp,  nil,           true,  $VAR.line, localctx.(*Instruccion_declaracionContext).Get_VAR().GetColumn()) 
2023-11-01 18:05:39:646 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,71:42]
2023-11-01 18:05:39:646 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,71:78].[@-1,41:44='text',<0>,71:81]
2023-11-01 18:05:39:647 action-translator LogManager.java:25 qattr [@-1,48:63='instruccion_tipo',<0>,71:88].[@-1,65:72='tipo_exp',<0>,71:105]
2023-11-01 18:05:39:650 action-translator LogManager.java:25 qattr [@-1,99:101='VAR',<0>,71:139].[@-1,103:106='line',<0>,71:143]
2023-11-01 18:05:39:650 action-translator LogManager.java:25 translate  $instr = instruction.NewDeclaration($ID.text, $instruccion_tipo.tipo_exp, $expressions.p, true,  $VAR.line, localctx.(*Instruccion_declaracionContext).Get_VAR().GetColumn()) 
2023-11-01 18:05:39:650 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,72:63]
2023-11-01 18:05:39:650 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,72:99].[@-1,41:44='text',<0>,72:102]
2023-11-01 18:05:39:650 action-translator LogManager.java:25 qattr [@-1,48:63='instruccion_tipo',<0>,72:109].[@-1,65:72='tipo_exp',<0>,72:126]
2023-11-01 18:05:39:651 action-translator LogManager.java:25 qattr [@-1,76:86='expressions',<0>,72:137].[@-1,88:88='p',<0>,72:149]
2023-11-01 18:05:39:651 action-translator LogManager.java:25 qattr [@-1,99:101='VAR',<0>,72:160].[@-1,103:106='line',<0>,72:164]
2023-11-01 18:05:39:654 action-translator LogManager.java:25 translate  $instr = instruction.NewDeclaration($ID.text, interfaces.NULL,      $expressions.p, false, $LET.line, localctx.(*Instruccion_declaracionContext).Get_LET().GetColumn()) 
2023-11-01 18:05:39:654 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,73:47]
2023-11-01 18:05:39:654 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,73:83].[@-1,41:44='text',<0>,73:86]
2023-11-01 18:05:39:654 action-translator LogManager.java:25 qattr [@-1,70:80='expressions',<0>,73:115].[@-1,82:82='p',<0>,73:127]
2023-11-01 18:05:39:664 action-translator LogManager.java:25 qattr [@-1,93:95='LET',<0>,73:138].[@-1,97:100='line',<0>,73:142]
2023-11-01 18:05:39:671 action-translator LogManager.java:25 translate  $instr = instruction.NewDeclaration($ID.text, $instruccion_tipo.tipo_exp, nil,            false, $LET.line, localctx.(*Instruccion_declaracionContext).Get_LET().GetColumn()) 
2023-11-01 18:05:39:672 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,74:51]
2023-11-01 18:05:39:680 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,74:87].[@-1,41:44='text',<0>,74:90]
2023-11-01 18:05:39:684 action-translator LogManager.java:25 qattr [@-1,48:63='instruccion_tipo',<0>,74:97].[@-1,65:72='tipo_exp',<0>,74:114]
2023-11-01 18:05:39:687 action-translator LogManager.java:25 qattr [@-1,99:101='LET',<0>,74:148].[@-1,103:106='line',<0>,74:152]
2023-11-01 18:05:39:687 action-translator LogManager.java:25 translate  $instr = instruction.NewDeclaration($ID.text, $instruccion_tipo.tipo_exp, $expressions.p, false, $LET.line, localctx.(*Instruccion_declaracionContext).Get_LET().GetColumn()) 
2023-11-01 18:05:39:698 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,75:64]
2023-11-01 18:05:39:698 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,75:100].[@-1,41:44='text',<0>,75:103]
2023-11-01 18:05:39:699 action-translator LogManager.java:25 qattr [@-1,48:63='instruccion_tipo',<0>,75:110].[@-1,65:72='tipo_exp',<0>,75:127]
2023-11-01 18:05:39:702 action-translator LogManager.java:25 qattr [@-1,76:86='expressions',<0>,75:138].[@-1,88:88='p',<0>,75:150]
2023-11-01 18:05:39:702 action-translator LogManager.java:25 qattr [@-1,99:101='LET',<0>,75:161].[@-1,103:106='line',<0>,75:165]
2023-11-01 18:05:39:709 action-translator LogManager.java:25 translate  $instr = instruction.NewAssignment($ID.text, $expressions.p, $ID.line, localctx.(*Instruccion_asignacionContext).Get_ID().GetColumn()) 
2023-11-01 18:05:39:709 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,80:27]
2023-11-01 18:05:39:709 action-translator LogManager.java:25 qattr [@-1,37:38='ID',<0>,80:62].[@-1,40:43='text',<0>,80:65]
2023-11-01 18:05:39:710 action-translator LogManager.java:25 qattr [@-1,47:57='expressions',<0>,80:72].[@-1,59:59='p',<0>,80:84]
2023-11-01 18:05:39:712 action-translator LogManager.java:25 qattr [@-1,63:64='ID',<0>,80:88].[@-1,66:69='line',<0>,80:91]
2023-11-01 18:05:39:733 action-translator LogManager.java:25 translate  $instr = instruction.NewIf($expressions.p, $left_instr.l, nil, nil,$IF.line, localctx.(*Instruccion_ifContext).Get_IF().GetColumn()) 
2023-11-01 18:05:39:733 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,85:64]
2023-11-01 18:05:39:733 action-translator LogManager.java:25 qattr [@-1,29:39='expressions',<0>,85:91].[@-1,41:41='p',<0>,85:103]
2023-11-01 18:05:39:736 action-translator LogManager.java:25 qattr [@-1,45:54='left_instr',<0>,85:107].[@-1,56:56='l',<0>,85:118]
2023-11-01 18:05:39:736 action-translator LogManager.java:25 qattr [@-1,69:70='IF',<0>,85:131].[@-1,72:75='line',<0>,85:134]
2023-11-01 18:05:39:737 action-translator LogManager.java:25 translate  $instr = instruction.NewIf($expressions.p, $left_instr.l, $right_instr.l, nil,     $IF.line, localctx.(*Instruccion_ifContext).Get_IF().GetColumn()) 
2023-11-01 18:05:39:737 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,86:114]
2023-11-01 18:05:39:737 action-translator LogManager.java:25 qattr [@-1,29:39='expressions',<0>,86:141].[@-1,41:41='p',<0>,86:153]
2023-11-01 18:05:39:737 action-translator LogManager.java:25 qattr [@-1,45:54='left_instr',<0>,86:157].[@-1,56:56='l',<0>,86:168]
2023-11-01 18:05:39:737 action-translator LogManager.java:25 qattr [@-1,60:70='right_instr',<0>,86:172].[@-1,72:72='l',<0>,86:184]
2023-11-01 18:05:39:737 action-translator LogManager.java:25 qattr [@-1,85:86='IF',<0>,86:197].[@-1,88:91='line',<0>,86:200]
2023-11-01 18:05:39:745 action-translator LogManager.java:25 translate  $instr = instruction.NewIf($expressions.p, $left_instr.l, nil, $instr_else_if.l,  $IF.line, localctx.(*Instruccion_ifContext).Get_IF().GetColumn()) 
2023-11-01 18:05:39:746 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,87:83]
2023-11-01 18:05:39:747 action-translator LogManager.java:25 qattr [@-1,29:39='expressions',<0>,87:110].[@-1,41:41='p',<0>,87:122]
2023-11-01 18:05:39:747 action-translator LogManager.java:25 qattr [@-1,45:54='left_instr',<0>,87:126].[@-1,56:56='l',<0>,87:137]
2023-11-01 18:05:39:747 action-translator LogManager.java:25 qattr [@-1,65:77='instr_else_if',<0>,87:146].[@-1,79:79='l',<0>,87:160]
2023-11-01 18:05:39:748 action-translator LogManager.java:25 qattr [@-1,84:85='IF',<0>,87:165].[@-1,87:90='line',<0>,87:168]
2023-11-01 18:05:39:749 action-translator LogManager.java:25 translate 
    $l =  arrayList.New()
  
2023-11-01 18:05:39:749 action-translator LogManager.java:25 attr [@-1,7:7='l',<0>,92:5]
2023-11-01 18:05:39:752 action-translator LogManager.java:25 translate 
        listInt := localctx.(*Instr_else_ifContext).GetE()
        for _, e := range listInt {
            $l.Add(e.GetInstr())
        }
    
2023-11-01 18:05:39:752 action-translator LogManager.java:25 attr [@-1,112:112='l',<0>,97:13]
2023-11-01 18:05:39:766 action-translator LogManager.java:25 translate  $p = ternario.NewIf($cond.p, $left_instr.p, nil, nil,                       $IF.line, localctx.(*Instruccion_ternarioContext).Get_IF().GetColumn()) 
2023-11-01 18:05:39:766 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,103:68]
2023-11-01 18:05:39:766 action-translator LogManager.java:25 qattr [@-1,22:25='cond',<0>,103:88].[@-1,27:27='p',<0>,103:93]
2023-11-01 18:05:39:767 action-translator LogManager.java:25 qattr [@-1,31:40='left_instr',<0>,103:97].[@-1,42:42='p',<0>,103:108]
2023-11-01 18:05:39:767 action-translator LogManager.java:25 qattr [@-1,78:79='IF',<0>,103:144].[@-1,81:84='line',<0>,103:147]
2023-11-01 18:05:39:768 action-translator LogManager.java:25 translate  $p = ternario.NewIf($cond.p, $left_instr.p, $right_instr.p, nil,             $IF.line, localctx.(*Instruccion_ternarioContext).Get_IF().GetColumn()) 
2023-11-01 18:05:39:769 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,104:117]
2023-11-01 18:05:39:769 action-translator LogManager.java:25 qattr [@-1,22:25='cond',<0>,104:137].[@-1,27:27='p',<0>,104:142]
2023-11-01 18:05:39:769 action-translator LogManager.java:25 qattr [@-1,31:40='left_instr',<0>,104:146].[@-1,42:42='p',<0>,104:157]
2023-11-01 18:05:39:769 action-translator LogManager.java:25 qattr [@-1,46:56='right_instr',<0>,104:161].[@-1,58:58='p',<0>,104:173]
2023-11-01 18:05:39:769 action-translator LogManager.java:25 qattr [@-1,79:80='IF',<0>,104:194].[@-1,82:85='line',<0>,104:197]
2023-11-01 18:05:39:770 action-translator LogManager.java:25 translate  $p = ternario.NewIf($cond.p, $left_instr.p, nil, $instr_else_if_ternario.l, $IF.line, localctx.(*Instruccion_ternarioContext).Get_IF().GetColumn()) 
2023-11-01 18:05:39:771 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,105:102]
2023-11-01 18:05:39:771 action-translator LogManager.java:25 qattr [@-1,22:25='cond',<0>,105:122].[@-1,27:27='p',<0>,105:127]
2023-11-01 18:05:39:771 action-translator LogManager.java:25 qattr [@-1,31:40='left_instr',<0>,105:131].[@-1,42:42='p',<0>,105:142]
2023-11-01 18:05:39:775 action-translator LogManager.java:25 qattr [@-1,51:72='instr_else_if_ternario',<0>,105:151].[@-1,74:74='l',<0>,105:174]
2023-11-01 18:05:39:775 action-translator LogManager.java:25 qattr [@-1,78:79='IF',<0>,105:178].[@-1,81:84='line',<0>,105:181]
2023-11-01 18:05:39:779 action-translator LogManager.java:25 translate 
    $l =  arrayList.New()
  
2023-11-01 18:05:39:779 action-translator LogManager.java:25 attr [@-1,7:7='l',<0>,110:5]
2023-11-01 18:05:39:779 action-translator LogManager.java:25 translate 
        listInt := localctx.(*Instr_else_if_ternarioContext).GetE()
        for _, e := range listInt {
            $l.Add(e.GetP())
        }
    
2023-11-01 18:05:39:779 action-translator LogManager.java:25 attr [@-1,121:121='l',<0>,115:13]
2023-11-01 18:05:39:867 action-translator LogManager.java:25 translate  $instr = instruction.NewWhile($expressions.p, $instrucciones.l, $WHILE.line, localctx.(*Instruccion_whileContext).Get_WHILE().GetColumn()) 
2023-11-01 18:05:39:867 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,188:55]
2023-11-01 18:05:39:867 action-translator LogManager.java:25 qattr [@-1,32:42='expressions',<0>,188:85].[@-1,44:44='p',<0>,188:97]
2023-11-01 18:05:39:867 action-translator LogManager.java:25 qattr [@-1,48:60='instrucciones',<0>,188:101].[@-1,62:62='l',<0>,188:115]
2023-11-01 18:05:39:867 action-translator LogManager.java:25 qattr [@-1,66:70='WHILE',<0>,188:119].[@-1,72:75='line',<0>,188:125]
2023-11-01 18:05:39:867 action-translator LogManager.java:25 translate  $instr = instruction.NewFor($ID.text, interfaces.INTEGER, $left.p, $right.p, $instrucciones.l, $FOR.line, localctx.(*Instruccion_for_inContext).Get_FOR().GetColumn()) 
2023-11-01 18:05:39:867 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,191:97]
2023-11-01 18:05:39:867 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,191:125].[@-1,33:36='text',<0>,191:128]
2023-11-01 18:05:39:867 action-translator LogManager.java:25 qattr [@-1,60:63='left',<0>,191:155].[@-1,65:65='p',<0>,191:160]
2023-11-01 18:05:39:867 action-translator LogManager.java:25 qattr [@-1,69:73='right',<0>,191:164].[@-1,75:75='p',<0>,191:170]
2023-11-01 18:05:39:867 action-translator LogManager.java:25 qattr [@-1,79:91='instrucciones',<0>,191:174].[@-1,93:93='l',<0>,191:188]
2023-11-01 18:05:39:867 action-translator LogManager.java:25 qattr [@-1,97:99='FOR',<0>,191:192].[@-1,101:104='line',<0>,191:196]
2023-11-01 18:05:39:872 action-translator LogManager.java:25 translate  $instr = instruction.NewFor($ID.text, interfaces.STRING,  $left.p, nil, $instrucciones.l,      $FOR.line, localctx.(*Instruccion_for_inContext).Get_FOR().GetColumn()) 
2023-11-01 18:05:39:872 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,192:67]
2023-11-01 18:05:39:872 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,192:95].[@-1,33:36='text',<0>,192:98]
2023-11-01 18:05:39:873 action-translator LogManager.java:25 qattr [@-1,60:63='left',<0>,192:125].[@-1,65:65='p',<0>,192:130]
2023-11-01 18:05:39:877 action-translator LogManager.java:25 qattr [@-1,74:86='instrucciones',<0>,192:139].[@-1,88:88='l',<0>,192:153]
2023-11-01 18:05:39:878 action-translator LogManager.java:25 qattr [@-1,97:99='FOR',<0>,192:162].[@-1,101:104='line',<0>,192:166]
2023-11-01 18:05:39:880 action-translator LogManager.java:25 translate  $instr = instruction.NewWtrue($instrucciones.l, $WHILE.line, localctx.(*Instruccion_while_trueContext).Get_WHILE().GetColumn()) 
2023-11-01 18:05:39:880 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,196:48]
2023-11-01 18:05:39:887 action-translator LogManager.java:25 qattr [@-1,32:44='instrucciones',<0>,196:78].[@-1,46:46='l',<0>,196:92]
2023-11-01 18:05:39:887 action-translator LogManager.java:25 qattr [@-1,50:54='WHILE',<0>,196:96].[@-1,56:59='line',<0>,196:102]
2023-11-01 18:05:39:887 action-translator LogManager.java:25 translate  $p = ternario.NewWhileter($instrucciones.l, $WHILE.line, localctx.(*Instruccion_while_true_ternarioContext).Get_WHILE().GetColumn()) 
2023-11-01 18:05:39:887 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,201:49]
2023-11-01 18:05:39:887 action-translator LogManager.java:25 qattr [@-1,28:40='instrucciones',<0>,201:75].[@-1,42:42='l',<0>,201:89]
2023-11-01 18:05:39:897 action-translator LogManager.java:25 qattr [@-1,46:50='WHILE',<0>,201:93].[@-1,52:55='line',<0>,201:99]
2023-11-01 18:05:39:899 action-translator LogManager.java:25 translate  $instr = instruction.NewReturn($expressions.p, $RETURN.line, localctx.(*Instruccion_returnContext).Get_RETURN().GetColumn()) 
2023-11-01 18:05:39:899 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,217:23]
2023-11-01 18:05:39:899 action-translator LogManager.java:25 qattr [@-1,33:43='expressions',<0>,217:54].[@-1,45:45='p',<0>,217:66]
2023-11-01 18:05:39:899 action-translator LogManager.java:25 qattr [@-1,49:54='RETURN',<0>,217:70].[@-1,56:59='line',<0>,217:77]
2023-11-01 18:05:39:901 action-translator LogManager.java:25 translate  $instr = instruction.NewFunction($ID.text, nil, $instrucciones.l, interfaces.NULL,      $FUNC.line, localctx.(*Instruccion_funcContext).Get_FUNC().GetColumn()) 
2023-11-01 18:05:39:901 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,222:62]
2023-11-01 18:05:39:901 action-translator LogManager.java:25 qattr [@-1,35:36='ID',<0>,222:95].[@-1,38:41='text',<0>,222:98]
2023-11-01 18:05:39:901 action-translator LogManager.java:25 qattr [@-1,50:62='instrucciones',<0>,222:110].[@-1,64:64='l',<0>,222:124]
2023-11-01 18:05:39:906 action-translator LogManager.java:25 qattr [@-1,90:93='FUNC',<0>,222:150].[@-1,95:98='line',<0>,222:155]
2023-11-01 18:05:39:909 action-translator LogManager.java:25 translate  $instr = instruction.NewFunction($ID.text, nil, $instrucciones.l, $instruccion_tipo.tipo_exp, $FUNC.line, localctx.(*Instruccion_funcContext).Get_FUNC().GetColumn()) 
2023-11-01 18:05:39:909 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,223:94]
2023-11-01 18:05:39:909 action-translator LogManager.java:25 qattr [@-1,35:36='ID',<0>,223:127].[@-1,38:41='text',<0>,223:130]
2023-11-01 18:05:39:910 action-translator LogManager.java:25 qattr [@-1,50:62='instrucciones',<0>,223:142].[@-1,64:64='l',<0>,223:156]
2023-11-01 18:05:39:911 action-translator LogManager.java:25 qattr [@-1,68:83='instruccion_tipo',<0>,223:160].[@-1,85:92='tipo_exp',<0>,223:177]
2023-11-01 18:05:39:911 action-translator LogManager.java:25 qattr [@-1,96:99='FUNC',<0>,223:188].[@-1,101:104='line',<0>,223:193]
2023-11-01 18:05:39:913 action-translator LogManager.java:25 translate  $instr = instruction.NewFunction($ID.text, $list_function_parameters.l, $instrucciones.l, interfaces.NULL,      $FUNC.line, localctx.(*Instruccion_funcContext).Get_FUNC().GetColumn()) 
2023-11-01 18:05:39:913 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,224:88]
2023-11-01 18:05:39:916 action-translator LogManager.java:25 qattr [@-1,35:36='ID',<0>,224:121].[@-1,38:41='text',<0>,224:124]
2023-11-01 18:05:39:917 action-translator LogManager.java:25 qattr [@-1,45:68='list_function_parameters',<0>,224:131].[@-1,70:70='l',<0>,224:156]
2023-11-01 18:05:39:917 action-translator LogManager.java:25 qattr [@-1,74:86='instrucciones',<0>,224:160].[@-1,88:88='l',<0>,224:174]
2023-11-01 18:05:39:917 action-translator LogManager.java:25 qattr [@-1,114:117='FUNC',<0>,224:200].[@-1,119:122='line',<0>,224:205]
2023-11-01 18:05:39:918 action-translator LogManager.java:25 translate  $instr = instruction.NewFunction($ID.text, $list_function_parameters.l, $instrucciones.l, $instruccion_tipo.tipo_exp, $FUNC.line, localctx.(*Instruccion_funcContext).Get_FUNC().GetColumn()) 
2023-11-01 18:05:39:918 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,225:119]
2023-11-01 18:05:39:918 action-translator LogManager.java:25 qattr [@-1,35:36='ID',<0>,225:152].[@-1,38:41='text',<0>,225:155]
2023-11-01 18:05:39:919 action-translator LogManager.java:25 qattr [@-1,45:68='list_function_parameters',<0>,225:162].[@-1,70:70='l',<0>,225:187]
2023-11-01 18:05:39:919 action-translator LogManager.java:25 qattr [@-1,74:86='instrucciones',<0>,225:191].[@-1,88:88='l',<0>,225:205]
2023-11-01 18:05:39:919 action-translator LogManager.java:25 qattr [@-1,92:107='instruccion_tipo',<0>,225:209].[@-1,109:116='tipo_exp',<0>,225:226]
2023-11-01 18:05:39:919 action-translator LogManager.java:25 qattr [@-1,120:123='FUNC',<0>,225:237].[@-1,125:128='line',<0>,225:242]
2023-11-01 18:05:39:920 action-translator LogManager.java:25 translate 
    $l =  arrayList.New()
  
2023-11-01 18:05:39:920 action-translator LogManager.java:25 attr [@-1,7:7='l',<0>,230:5]
2023-11-01 18:05:39:920 action-translator LogManager.java:25 translate 
        listInt := localctx.(*List_function_parametersContext).GetE()
        for _, e := range listInt {
            $l.Add(e.GetInstr())
        }
    
2023-11-01 18:05:39:920 action-translator LogManager.java:25 attr [@-1,123:123='l',<0>,235:13]
2023-11-01 18:05:39:930 action-translator LogManager.java:25 translate  $instr = instruction.NewListExprefunc($ID.text, $instruccion_tipo.tipo_exp, $ID.line, localctx.(*Block_parameters_fnContext).Get_ID().GetColumn()) 
2023-11-01 18:05:39:930 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,240:46]
2023-11-01 18:05:39:930 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,240:84].[@-1,43:46='text',<0>,240:87]
2023-11-01 18:05:39:934 action-translator LogManager.java:25 qattr [@-1,50:65='instruccion_tipo',<0>,240:94].[@-1,67:74='tipo_exp',<0>,240:111]
2023-11-01 18:05:39:934 action-translator LogManager.java:25 qattr [@-1,78:79='ID',<0>,240:122].[@-1,81:84='line',<0>,240:125]
2023-11-01 18:05:39:936 action-translator LogManager.java:25 translate  $instr = instruction.NewListExprefunc($ID.text, $instruccion_tipo.tipo_exp, $ID.line, localctx.(*Block_parameters_fnContext).Get_ID().GetColumn()) 
2023-11-01 18:05:39:937 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,241:46]
2023-11-01 18:05:39:937 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,241:84].[@-1,43:46='text',<0>,241:87]
2023-11-01 18:05:39:937 action-translator LogManager.java:25 qattr [@-1,50:65='instruccion_tipo',<0>,241:94].[@-1,67:74='tipo_exp',<0>,241:111]
2023-11-01 18:05:39:937 action-translator LogManager.java:25 qattr [@-1,78:79='ID',<0>,241:122].[@-1,81:84='line',<0>,241:125]
2023-11-01 18:05:39:969 action-translator LogManager.java:25 translate $tipo_exp = interfaces.INTEGER
2023-11-01 18:05:39:969 action-translator LogManager.java:25 attr [@-1,1:8='tipo_exp',<0>,356:9]
2023-11-01 18:05:39:969 action-translator LogManager.java:25 translate $tipo_exp = interfaces.FLOAT
2023-11-01 18:05:39:969 action-translator LogManager.java:25 attr [@-1,1:8='tipo_exp',<0>,357:11]
2023-11-01 18:05:39:970 action-translator LogManager.java:25 translate $tipo_exp = interfaces.STRING
2023-11-01 18:05:39:970 action-translator LogManager.java:25 attr [@-1,1:8='tipo_exp',<0>,358:12]
2023-11-01 18:05:39:970 action-translator LogManager.java:25 translate $tipo_exp = interfaces.BOOLEAN
2023-11-01 18:05:39:970 action-translator LogManager.java:25 attr [@-1,1:8='tipo_exp',<0>,359:9]
2023-11-01 18:05:39:970 action-translator LogManager.java:25 translate $tipo_exp = interfaces.CHAR
2023-11-01 18:05:39:970 action-translator LogManager.java:25 attr [@-1,1:8='tipo_exp',<0>,360:9]
2023-11-01 18:05:39:971 action-translator LogManager.java:25 translate 
    $l =  arrayList.New()
  
2023-11-01 18:05:39:971 action-translator LogManager.java:25 attr [@-1,7:7='l',<0>,368:5]
2023-11-01 18:05:39:971 action-translator LogManager.java:25 translate 
        listInt := localctx.(*List_expressionContext).GetE()
        for _, e := range listInt {
            $l.Add(e.GetP())
        }
    
2023-11-01 18:05:39:972 action-translator LogManager.java:25 attr [@-1,114:114='l',<0>,373:13]
2023-11-01 18:05:39:977 action-translator LogManager.java:25 translate  $p =  instruction.NewListExpre($expressions.p) 
2023-11-01 18:05:39:979 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,379:23]
2023-11-01 18:05:39:980 action-translator LogManager.java:25 qattr [@-1,33:43='expressions',<0>,379:54].[@-1,45:45='p',<0>,379:66]
2023-11-01 18:05:39:980 action-translator LogManager.java:25 translate  $p =  instruction.NewListExpre($expressions.p) 
2023-11-01 18:05:39:981 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,380:19]
2023-11-01 18:05:39:981 action-translator LogManager.java:25 qattr [@-1,33:43='expressions',<0>,380:50].[@-1,45:45='p',<0>,380:62]
2023-11-01 18:05:39:987 action-translator LogManager.java:25 translate  $p = $expre_log.p 
2023-11-01 18:05:39:987 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,385:20]
2023-11-01 18:05:39:987 action-translator LogManager.java:25 qattr [@-1,7:15='expre_log',<0>,385:25].[@-1,17:17='p',<0>,385:35]
2023-11-01 18:05:39:993 action-translator LogManager.java:25 translate  $p = $expre_arit.p 
2023-11-01 18:05:39:997 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,387:32]
2023-11-01 18:05:39:997 action-translator LogManager.java:25 qattr [@-1,7:16='expre_arit',<0>,387:37].[@-1,18:18='p',<0>,387:48]
2023-11-01 18:05:39:997 action-translator LogManager.java:25 translate  $p = $expre_rel.p 
2023-11-01 18:05:39:997 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,388:32]
2023-11-01 18:05:39:997 action-translator LogManager.java:25 qattr [@-1,7:15='expre_rel',<0>,388:37].[@-1,17:17='p',<0>,388:47]
2023-11-01 18:05:39:997 action-translator LogManager.java:25 translate 
2023-11-01 18:05:39:997 action-translator LogManager.java:25 translate  $p = expression.NewOperacion($left.p, $op.text, nil,      true,  $op.line, localctx.(*Expre_logContext).GetOp().GetColumn()) 
2023-11-01 18:05:39:997 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:122]
2023-11-01 18:05:39:997 action-translator LogManager.java:25 qattr [@-1,31:34='left',<0>,2:151].[@-1,36:36='p',<0>,2:156]
2023-11-01 18:05:39:997 action-translator LogManager.java:25 qattr [@-1,40:41='op',<0>,2:160].[@-1,43:46='text',<0>,2:163]
2023-11-01 18:05:39:997 action-translator LogManager.java:25 qattr [@-1,67:68='op',<0>,2:187].[@-1,70:73='line',<0>,2:190]
2023-11-01 18:05:40:002 action-translator LogManager.java:25 translate  $p = $expre_rel.p 
2023-11-01 18:05:40:002 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,3:97]
2023-11-01 18:05:40:002 action-translator LogManager.java:25 qattr [@-1,7:15='expre_rel',<0>,3:102].[@-1,17:17='p',<0>,3:112]
2023-11-01 18:05:40:005 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-11-01 18:05:40:005 action-translator LogManager.java:25 translate  $p = expression.NewOperacion($left.p, $op.text, $right.p, false, $op.line, localctx.(*Expre_logContext).GetOp().GetColumn()) 
2023-11-01 18:05:40:009 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,6:168]
2023-11-01 18:05:40:009 action-translator LogManager.java:25 qattr [@-1,31:34='left',<0>,6:197].[@-1,36:36='p',<0>,6:202]
2023-11-01 18:05:40:009 action-translator LogManager.java:25 qattr [@-1,40:41='op',<0>,6:206].[@-1,43:46='text',<0>,6:209]
2023-11-01 18:05:40:010 action-translator LogManager.java:25 qattr [@-1,50:54='right',<0>,6:216].[@-1,56:56='p',<0>,6:222]
2023-11-01 18:05:40:010 action-translator LogManager.java:25 qattr [@-1,67:68='op',<0>,6:233].[@-1,70:73='line',<0>,6:236]
2023-11-01 18:05:40:016 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-11-01 18:05:40:017 action-translator LogManager.java:25 translate 
2023-11-01 18:05:40:017 action-translator LogManager.java:25 translate  $p = $expre_arit.p 
2023-11-01 18:05:40:017 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:100]
2023-11-01 18:05:40:017 action-translator LogManager.java:25 qattr [@-1,7:16='expre_arit',<0>,2:105].[@-1,18:18='p',<0>,2:116]
2023-11-01 18:05:40:017 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-11-01 18:05:40:018 action-translator LogManager.java:25 translate  $p = expression.NewOperacion($left.p, $op.text, $right.p, false, $op.line, localctx.(*Expre_relContext).GetOp().GetColumn()) 
2023-11-01 18:05:40:022 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:238]
2023-11-01 18:05:40:027 action-translator LogManager.java:25 qattr [@-1,31:34='left',<0>,5:267].[@-1,36:36='p',<0>,5:272]
2023-11-01 18:05:40:027 action-translator LogManager.java:25 qattr [@-1,40:41='op',<0>,5:276].[@-1,43:46='text',<0>,5:279]
2023-11-01 18:05:40:029 action-translator LogManager.java:25 qattr [@-1,50:54='right',<0>,5:286].[@-1,56:56='p',<0>,5:292]
2023-11-01 18:05:40:030 action-translator LogManager.java:25 qattr [@-1,67:68='op',<0>,5:303].[@-1,70:73='line',<0>,5:306]
2023-11-01 18:05:40:031 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-11-01 18:05:40:032 action-translator LogManager.java:25 translate 
2023-11-01 18:05:40:033 action-translator LogManager.java:25 translate  $p = expression.NewOperacion($left.p, $op.text, nil,      true,  $op.line, localctx.(*Expre_aritContext).GetOp().GetColumn()) 
2023-11-01 18:05:40:033 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:111]
2023-11-01 18:05:40:033 action-translator LogManager.java:25 qattr [@-1,31:34='left',<0>,2:140].[@-1,36:36='p',<0>,2:145]
2023-11-01 18:05:40:033 action-translator LogManager.java:25 qattr [@-1,40:41='op',<0>,2:149].[@-1,43:46='text',<0>,2:152]
2023-11-01 18:05:40:033 action-translator LogManager.java:25 qattr [@-1,67:68='op',<0>,2:176].[@-1,70:73='line',<0>,2:179]
2023-11-01 18:05:40:033 action-translator LogManager.java:25 translate  $p = $expre_valor.p 
2023-11-01 18:05:40:034 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,3:85]
2023-11-01 18:05:40:034 action-translator LogManager.java:25 qattr [@-1,7:17='expre_valor',<0>,3:90].[@-1,19:19='p',<0>,3:102]
2023-11-01 18:05:40:034 action-translator LogManager.java:25 translate  $p = $expressions.p 
2023-11-01 18:05:40:034 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,4:119]
2023-11-01 18:05:40:034 action-translator LogManager.java:25 qattr [@-1,7:17='expressions',<0>,4:124].[@-1,19:19='p',<0>,4:136]
2023-11-01 18:05:40:034 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2023-11-01 18:05:40:035 action-translator LogManager.java:25 translate  $p = expression.NewOperacion($left.p, $op.text, $right.p, false, $op.line, localctx.(*Expre_aritContext).GetOp().GetColumn()) 
2023-11-01 18:05:40:035 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,7:172]
2023-11-01 18:05:40:035 action-translator LogManager.java:25 qattr [@-1,31:34='left',<0>,7:201].[@-1,36:36='p',<0>,7:206]
2023-11-01 18:05:40:036 action-translator LogManager.java:25 qattr [@-1,40:41='op',<0>,7:210].[@-1,43:46='text',<0>,7:213]
2023-11-01 18:05:40:036 action-translator LogManager.java:25 qattr [@-1,50:54='right',<0>,7:220].[@-1,56:56='p',<0>,7:226]
2023-11-01 18:05:40:036 action-translator LogManager.java:25 qattr [@-1,67:68='op',<0>,7:237].[@-1,70:73='line',<0>,7:240]
2023-11-01 18:05:40:036 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-11-01 18:05:40:039 action-translator LogManager.java:25 translate  $p = expression.NewOperacion($left.p, $op.text, $right.p, false, $op.line, localctx.(*Expre_aritContext).GetOp().GetColumn()) 
2023-11-01 18:05:40:039 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,8:165]
2023-11-01 18:05:40:039 action-translator LogManager.java:25 qattr [@-1,31:34='left',<0>,8:194].[@-1,36:36='p',<0>,8:199]
2023-11-01 18:05:40:039 action-translator LogManager.java:25 qattr [@-1,40:41='op',<0>,8:203].[@-1,43:46='text',<0>,8:206]
2023-11-01 18:05:40:045 action-translator LogManager.java:25 qattr [@-1,50:54='right',<0>,8:213].[@-1,56:56='p',<0>,8:219]
2023-11-01 18:05:40:045 action-translator LogManager.java:25 qattr [@-1,67:68='op',<0>,8:230].[@-1,70:73='line',<0>,8:233]
2023-11-01 18:05:40:046 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2023-11-01 18:05:40:046 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-11-01 18:05:40:047 action-translator LogManager.java:25 translate  $p = $primitivo.p 
2023-11-01 18:05:40:047 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,411:55]
2023-11-01 18:05:40:047 action-translator LogManager.java:25 qattr [@-1,7:15='primitivo',<0>,411:60].[@-1,17:17='p',<0>,411:70]
2023-11-01 18:05:40:048 action-translator LogManager.java:25 translate 
              num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }

            $p = expression.NewPrimitivo(num, interfaces.INTEGER, interfaces.NULL, $NUMBER.line, localctx.(*PrimitivoContext).Get_NUMBER().GetColumn())
       
2023-11-01 18:05:40:049 action-translator LogManager.java:25 qattr [@-1,41:46='NUMBER',<0>,416:39].[@-1,48:51='text',<0>,416:46]
2023-11-01 18:05:40:049 action-translator LogManager.java:25 attr [@-1,158:158='p',<0>,421:13]
2023-11-01 18:05:40:049 action-translator LogManager.java:25 qattr [@-1,229:234='NUMBER',<0>,421:84].[@-1,236:239='line',<0>,421:91]
2023-11-01 18:05:40:052 action-translator LogManager.java:25 translate   
                num,err := strconv.ParseFloat($DOUBLE.text, 64)
                if err!= nil{
                    fmt.Println(err)
                }
            $p = expression.NewPrimitivo(num, interfaces.FLOAT, interfaces.NULL, $DOUBLE.line, localctx.(*PrimitivoContext).Get_DOUBLE().GetColumn())
              
2023-11-01 18:05:40:052 action-translator LogManager.java:25 qattr [@-1,51:56='DOUBLE',<0>,424:47].[@-1,58:61='text',<0>,424:54]
2023-11-01 18:05:40:052 action-translator LogManager.java:25 attr [@-1,170:170='p',<0>,428:13]
2023-11-01 18:05:40:052 action-translator LogManager.java:25 qattr [@-1,239:244='DOUBLE',<0>,428:82].[@-1,246:249='line',<0>,428:89]
2023-11-01 18:05:40:052 action-translator LogManager.java:25 translate  
              str:= $STRING.text[1:len($STRING.text)-1]
              $p = expression.NewPrimitivo(str, interfaces.STRING, interfaces.NULL, $STRING.line, localctx.(*PrimitivoContext).Get_STRING().GetColumn())
            
            
2023-11-01 18:05:40:052 action-translator LogManager.java:25 qattr [@-1,24:29='STRING',<0>,432:21].[@-1,31:34='text',<0>,432:28]
2023-11-01 18:05:40:052 action-translator LogManager.java:25 qattr [@-1,43:48='STRING',<0>,432:40].[@-1,50:53='text',<0>,432:47]
2023-11-01 18:05:40:052 action-translator LogManager.java:25 attr [@-1,75:75='p',<0>,433:15]
2023-11-01 18:05:40:062 action-translator LogManager.java:25 qattr [@-1,145:150='STRING',<0>,433:85].[@-1,152:155='line',<0>,433:92]
2023-11-01 18:05:40:067 action-translator LogManager.java:25 translate  
          
              exp,_ := strconv.ParseBool($BOOLEAN.text)
              $p = expression.NewPrimitivo(exp, interfaces.BOOLEAN, interfaces.NULL, $BOOLEAN.line, localctx.(*PrimitivoContext).Get_BOOLEAN().GetColumn())
            
2023-11-01 18:05:40:067 action-translator LogManager.java:25 qattr [@-1,57:63='BOOLEAN',<0>,438:42].[@-1,65:68='text',<0>,438:50]
2023-11-01 18:05:40:068 action-translator LogManager.java:25 attr [@-1,87:87='p',<0>,439:15]
2023-11-01 18:05:40:068 action-translator LogManager.java:25 qattr [@-1,158:164='BOOLEAN',<0>,439:86].[@-1,166:169='line',<0>,439:94]
2023-11-01 18:05:40:068 action-translator LogManager.java:25 translate 

            str:= $CHAR.text[1]
            $p = expression.NewPrimitivo(string(str), interfaces.CHAR, interfaces.NULL, $CHAR.line, localctx.(*PrimitivoContext).Get_CHAR().GetColumn())
          
          
2023-11-01 18:05:40:068 action-translator LogManager.java:25 qattr [@-1,23:26='CHAR',<0>,443:19].[@-1,28:31='text',<0>,443:24]
2023-11-01 18:05:40:070 action-translator LogManager.java:25 attr [@-1,50:50='p',<0>,444:13]
2023-11-01 18:05:40:070 action-translator LogManager.java:25 qattr [@-1,126:129='CHAR',<0>,444:89].[@-1,131:134='line',<0>,444:94]
2023-11-01 18:05:40:071 action-translator LogManager.java:25 translate  $p = instruction.NewIdentifier($ID.text, $ID.line, localctx.(*PrimitivoContext).Get_ID().GetColumn()) 
2023-11-01 18:05:40:071 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,450:9]
2023-11-01 18:05:40:071 action-translator LogManager.java:25 qattr [@-1,33:34='ID',<0>,450:40].[@-1,36:39='text',<0>,450:43]
2023-11-01 18:05:40:071 action-translator LogManager.java:25 qattr [@-1,43:44='ID',<0>,450:50].[@-1,46:49='line',<0>,450:53]
2023-11-01 18:05:40:077 action-translator LogManager.java:25 translate  $p = $instruccion_ternario.p 
2023-11-01 18:05:40:081 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,453:32]
2023-11-01 18:05:40:081 action-translator LogManager.java:25 qattr [@-1,7:26='instruccion_ternario',<0>,453:37].[@-1,28:28='p',<0>,453:58]
2023-11-01 18:05:40:083 action-translator LogManager.java:25 translate  $p = $instruccion_while_true_ternario.p 
2023-11-01 18:05:40:083 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,455:37]
2023-11-01 18:05:40:083 action-translator LogManager.java:25 qattr [@-1,7:37='instruccion_while_true_ternario',<0>,455:42].[@-1,39:39='p',<0>,455:74]
2023-11-01 18:05:43:443 action-translator LogManager.java:25 translate 

import "OLC2/Compilador/interfaces"
import "OLC2/Compilador/instruccion"
import "OLC2/Compilador/expression"
import "OLC2/Compilador/instruccion/ternario"
import arrayList "github.com/colegno/arraylist"


2023-11-01 18:05:43:444 action-translator LogManager.java:25 translate 

import "OLC2/Compilador/interfaces"
import "OLC2/Compilador/instruccion"
import "OLC2/Compilador/expression"
import "OLC2/Compilador/instruccion/ternario"
import arrayList "github.com/colegno/arraylist"


2023-11-01 18:05:43:636 action-translator LogManager.java:25 translate 

import "OLC2/Compilador/interfaces"
import "OLC2/Compilador/instruccion"
import "OLC2/Compilador/expression"
import "OLC2/Compilador/instruccion/ternario"
import arrayList "github.com/colegno/arraylist"


2023-11-01 18:05:43:636 action-translator LogManager.java:25 translate 

import "OLC2/Compilador/interfaces"
import "OLC2/Compilador/instruccion"
import "OLC2/Compilador/expression"
import "OLC2/Compilador/instruccion/ternario"
import arrayList "github.com/colegno/arraylist"


